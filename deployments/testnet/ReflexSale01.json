{
  "address": "0x4078165119e21A716830C797324741316F0DB778",
  "abi": [
    {
      "inputs": [],
      "name": "ACCURACY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_deposited",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_userWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "accountsDeposited",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "users",
          "type": "address[]"
        }
      ],
      "name": "addToWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canStart",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canceled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "soft",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "hard",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "min",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "max",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "presaleRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "listingRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "end",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "whitelisted",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "burn",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "privateSale",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "metaInfo",
              "type": "string"
            }
          ],
          "internalType": "struct IReflexSale01.SaleParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "configure",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposited",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earlyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdrawBNB",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "emergencyWithdrawTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "end",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ended",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeRouter",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "failed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRunner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSaleParams",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "soft",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "hard",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "min",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "max",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "presaleRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "listingRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "end",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "whitelisted",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "burn",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "privateSale",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "metaInfo",
              "type": "string"
            }
          ],
          "internalType": "struct IReflexSale01.SaleParams",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenBAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rateOfTokenAInTokenB",
          "type": "uint256"
        }
      ],
      "name": "getTokenAAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenAAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rateOfTokenAInTokenB",
          "type": "uint256"
        }
      ],
      "name": "getTokenBAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hardCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reflexRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_runner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_exchangeRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_whitelistImpl",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_proxyAdmin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_metaInfo",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isSaleUpdateApproved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isWhitelistEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "launched",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "listingRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "max",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metaInfo",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "min",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prepared",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "presaleRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "privateSale",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxyAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "raised",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reclaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reflexRouter",
      "outputs": [
        {
          "internalType": "contract IReflexRouter01",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addrs",
          "type": "address[]"
        }
      ],
      "name": "removeFromWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "removeWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resetWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "runner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "running",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saleAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saleParams",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "soft",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "hard",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "presaleRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "listingRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "whitelisted",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "burn",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "privateSale",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "metaInfo",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_runner",
          "type": "address"
        }
      ],
      "name": "setRunner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setSaleUpdateApproved",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "softCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "start",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "successful",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenA",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenB",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "userTokenAAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "userWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelist",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistImpl",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xbf760c7245341da3c23a53d609d053519361fc10f773d3bfc6f3c074ca70d7e6",
  "receipt": {
    "to": null,
    "from": "0x41026DbcCBF3e2868d1c41cbE025778D0Ada82Ad",
    "contractAddress": "0x4078165119e21A716830C797324741316F0DB778",
    "transactionIndex": 6,
    "gasUsed": "5034502",
    "logsBloom": "0x
    "blockHash": "0xed2790d8b7b57adf654641e2eafe5b634482c5895ceabc23a381e121f37dca23",
    "transactionHash": "0xbf760c7245341da3c23a53d609d053519361fc10f773d3bfc6f3c074ca70d7e6",
    "logs": [],
    "blockNumber": 22976834,
    "cumulativeGasUsed": "6177409",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 6,
  "solcInputHash": "388c52f916a6baeeb49eff51378fabad",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ACCURACY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_deposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_userWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accountsDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canStart\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canceled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"soft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hard\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"presaleRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listingRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"burn\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"privateSale\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"metaInfo\",\"type\":\"string\"}],\"internalType\":\"struct IReflexSale01.SaleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"configure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdrawBNB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"emergencyWithdrawTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"end\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ended\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRunner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSaleParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"soft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hard\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"presaleRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listingRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"burn\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"privateSale\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"metaInfo\",\"type\":\"string\"}],\"internalType\":\"struct IReflexSale01.SaleParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenBAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateOfTokenAInTokenB\",\"type\":\"uint256\"}],\"name\":\"getTokenAAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateOfTokenAInTokenB\",\"type\":\"uint256\"}],\"name\":\"getTokenBAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reflexRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_runner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchangeRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelistImpl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_proxyAdmin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_metaInfo\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSaleUpdateApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWhitelistEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"max\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metaInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"min\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prepared\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"raised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reclaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reflexRouter\",\"outputs\":[{\"internalType\":\"contract IReflexRouter01\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"runner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"running\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"soft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hard\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"presaleRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listingRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"burn\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"privateSale\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"metaInfo\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_runner\",\"type\":\"address\"}],\"name\":\"setRunner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setSaleUpdateApproved\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"successful\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"userTokenAAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistImpl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deposit(uint256)\":{\"details\":\"This entitles _msgSender() to (amount * presaleRate) after a successful sale\"},\"earlyWithdraw()\":{\"details\":\"This incurs a tax, where Reflex will take a cut of this tax\"},\"withdraw()\":{\"details\":\"This entitles _msgSender() to (amount * presaleRate) after a successful sale\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"configure((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,bool,bool,string))\":{\"notice\":\"Configure a reflex sale\"},\"deposit(uint256)\":{\"notice\":\"For users to deposit into the sale\"},\"earlyWithdraw()\":{\"notice\":\"For users to withdraw their deposited funds before the sale has been concluded\"},\"emergencyWithdrawBNB()\":{\"notice\":\"Withdraws BNB from the contract\"},\"emergencyWithdrawTokens(address)\":{\"notice\":\"Withdraws tokens that are stuck\"},\"exchangeRouter()\":{\"notice\":\"The address of the reflexRouter\"},\"finalize()\":{\"notice\":\"Finishes the sale, and if successful launches to PancakeSwap\"},\"lpToken()\":{\"notice\":\"The address of the LP token\"},\"owner()\":{\"notice\":\"The ReflexRouter owner\"},\"prepared()\":{\"notice\":\"State Settings\"},\"proxyAdmin()\":{\"notice\":\"The address of the proxy admin\"},\"reclaim()\":{\"notice\":\"EMERGENCY USE ONLY: Lets the owner of the sale reclaim any stuck funds\"},\"reflexRouter()\":{\"notice\":\"The ReflexRouter\"},\"runner()\":{\"notice\":\"The person running the sale\"},\"tokenA()\":{\"notice\":\"Configuration\"},\"totalTokens()\":{\"notice\":\"Current Status - These are modified after a sale has been setup and is running\"},\"whitelistImpl()\":{\"notice\":\"The address of the whitelist implementation\"},\"withdraw()\":{\"notice\":\"For users to withdraw from a sale\"}},\"notice\":\"A Reflex Sale\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ReflexSale01.sol\":\"ReflexSale01\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc7d7fe7d5ed5068742927e37b400591153dbe8526cd942cfcf5dbb971ba5e8e2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x37c56d5e4a1c4c65ad0dcc6af28442c5d35c6ca07d9ad6e966e07dceb97e6c8d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x828a6fb02c79a63dc5867427f355c0a9c65b4359fecadae73883154da550f6f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x603946f0dc2541ff45f4b5cb1424ed1870eb24f3396cd318b1996e7e65278907\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xca2eb23a188f213d914fad982985d07e491dbc9960a387d4469bfce5c48911b1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcbccf806d646bd9e2594650917208245d45998b887d5fc914de424247f5f9f9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0x8ddea9f930f26e588ea606f44c90d2623560c908e38614a03a4ca78aea8f9202\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x5615339d191e77be7e46319b67856f9355786f705b7b3c4a7237ab70c1864ab1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0x2bf89a0dae89f861c5e8013478e650e918d98d376e75393867ccec88b0bf2b90\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5d15d280d1f868f59a8264dc73f7ea8c51f10d78aac864b2f2ad29412d187ff5\",\"license\":\"MIT\"},\"contracts/ReflexSale01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\n\\nimport \\\"contracts/interfaces/uniswap/IUniswapV2Router02.sol\\\";\\nimport \\\"contracts/interfaces/uniswap/IUniswapV2Factory.sol\\\";\\nimport \\\"contracts/interfaces/IReflexRouter01.sol\\\";\\nimport \\\"contracts/interfaces/IReflexSale01.sol\\\";\\nimport \\\"contracts/interfaces/IERC20Extended.sol\\\";\\n\\nimport \\\"contracts/libraries/TransferHelper.sol\\\";\\n\\nimport \\\"contracts/Whitelist.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @notice A Reflex Sale\\n */\\ncontract ReflexSale01 is Initializable, ContextUpgradeable {\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n  using SafeMathUpgradeable for uint256;\\n\\n  uint256 public constant ACCURACY = 1e10;\\n\\n  /// @notice The ReflexRouter owner\\n  address public owner;\\n\\n  /// @notice The person running the sale\\n  address public runner;\\n\\n  /// @notice The ReflexRouter\\n  IReflexRouter01 public reflexRouter;\\n\\n  /// @notice The address of the whitelist implementation\\n  address public whitelistImpl;\\n\\n  /// @notice The address of the proxy admin\\n  address public proxyAdmin;\\n\\n  /// @notice The address of the reflexRouter\\n  IUniswapV2Router02 public exchangeRouter;\\n\\n  /// @notice The address of the LP token\\n  address public lpToken;\\n\\n  IReflexSale01.SaleParams public saleParams;\\n\\n  /**\\n   * @notice Configuration\\n   */\\n  address public tokenA; // The token that the sale is selling\\n  address public tokenB; // The token that the pay to buy sale tokens\\n  uint256 public softCap; // The soft cap of BNB or tokenB\\n  uint256 public hardCap; // The hard cap of BNB or tokenB\\n  uint256 public min; // The minimum amount of contributed BNB or tokenB\\n  uint256 public max; // The maximum amount of contributed BNB or tokenB\\n  uint256 public presaleRate; // How many tokenA is given per BNB or tokenB: no decimal consideration e.g. 1e9(= ACCURACY / 10) means 1 tokenB = 0.1 tokenA,\\n  uint256 public listingRate; // How many tokenA is worth 1 BNB or 1 tokenB when we list: no decimal consideration\\n  uint256 public liquidity; // What perecentage of raised funds will be allocated for liquidity (100 = 1% - i.e. out of 10,000)\\n  uint256 public start; // The start date in UNIX seconds of the presale\\n  uint256 public end; // The end date in UNIX seconds of the presale\\n  // uint256 public unlockTime; // The time in seconds that the liquidity lock should last\\n  address public whitelist; // Whitelist contract address\\n  bool public burn; // Whether or not to burn remaining sale tokens (if false, refunds the sale runner)\\n  bool public privateSale; // Whether or not the private sale\\n  string public metaInfo;\\n  address public treasury; // Treasury address where the fee will be sent\\n\\n  /**\\n   * @notice State Settings\\n   */\\n  bool public prepared; // True when the sale has been prepared to start by the owner\\n  bool public launched; // Whether the sale has been finalized and launched; inited to false by default\\n  bool public canceled; // This sale is canceled\\n\\n  /**\\n   * @notice Current Status - These are modified after a sale has been setup and is running\\n   */\\n  uint256 public totalTokens; // Total tokens determined for the sale\\n  uint256 public saleAmount; // How many tokens are on sale\\n  uint256 public liquidityAmount; // How many tokens are allocated for liquidity\\n  uint256 public raised; // How much BNB has been raised\\n  mapping(address => uint256) public _deposited; // A mapping of addresses to the amount of BNB they deposited\\n  bool public isSaleUpdateApproved; // Whether or not the sale praram update is approved\\n  bool public isWhitelistEnabled; // Whether or not the whitelist feature is enabled\\n\\n  /********************** Modifiers **********************/\\n\\n  /**\\n   * @notice Checks if the caller is the Reflex owner, Sale owner or the reflexRouter itself\\n   */\\n  modifier isAdmin() {\\n    require(\\n      address(reflexRouter) == _msgSender() || owner == _msgSender() || runner == _msgSender(),\\n      \\\"Caller isnt an admin\\\"\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @notice Checks if the sale is running\\n   */\\n  modifier isRunning() {\\n    require(running(), \\\"Sale isn't running!\\\");\\n    _;\\n  }\\n\\n  modifier isSuccessful() {\\n    require(successful(), \\\"Sale isn't successful!\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Checks if the sale is finished\\n   */\\n  modifier isEnded() {\\n    require(ended(), \\\"Sale hasnt ended\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Checks if the sale has been finalized\\n   */\\n  modifier isLaunched() {\\n    require(launched, \\\"Sale hasnt been launched yet\\\");\\n    _;\\n  }\\n\\n  function initialize(\\n    address _reflexRouter,\\n    address _owner,\\n    address _runner,\\n    address _tokenA,\\n    address _tokenB,\\n    address _exchangeRouter,\\n    address _whitelistImpl,\\n    address _proxyAdmin,\\n    // uint256 _unlockTime,\\n    string memory _metaInfo,\\n    address _treasury\\n  ) external initializer {\\n    __Context_init();\\n\\n    // Set the onwer of teh sale to be the owner of the deployer\\n    reflexRouter = IReflexRouter01(_reflexRouter);\\n    owner = _owner;\\n    runner = _runner;\\n    tokenA = _tokenA;\\n    tokenB = _tokenB;\\n\\n    // Let the reflexRouter control payments!\\n    TransferHelper.safeApprove(_tokenA, _reflexRouter, type(uint256).max);\\n\\n    exchangeRouter = IUniswapV2Router02(_exchangeRouter);\\n    whitelistImpl = _whitelistImpl;\\n    proxyAdmin = _proxyAdmin;\\n    // unlockTime = _unlockTime;\\n    metaInfo = _metaInfo;\\n    treasury = _treasury;\\n  }\\n\\n  /**\\n   * @notice Configure a reflex sale\\n   */\\n  function configure(IReflexSale01.SaleParams memory params) external isAdmin {\\n    if (msg.sender == runner) {\\n      require(isSaleUpdateApproved, \\\"sale update not approved\\\");\\n      isSaleUpdateApproved = false;\\n    }\\n\\n    // store the sale params\\n    saleParams = params;\\n\\n    // set the sale params\\n    softCap = params.soft;\\n    hardCap = params.hard;\\n    min = params.min;\\n    max = params.max;\\n    presaleRate = params.presaleRate;\\n    listingRate = params.listingRate;\\n    if (!params.privateSale) {\\n      liquidity = params.liquidity;\\n    }\\n    start = params.start;\\n    end = params.end;\\n    // TODO: Add a way for the runner to specify this\\n    burn = params.burn;\\n    privateSale = params.privateSale;\\n\\n    saleAmount = getTokenAAmount(hardCap, presaleRate);\\n    if (!privateSale) {\\n      liquidityAmount = getTokenAAmount(hardCap, listingRate).mul(liquidity).div(1e4);\\n    }\\n    totalTokens = saleAmount.add(liquidityAmount);\\n\\n    if (whitelist == address(0) && params.whitelisted) {\\n      whitelist = address(new TransparentUpgradeableProxy(whitelistImpl, proxyAdmin, new bytes(0)));\\n      Whitelist(whitelist).initialize();\\n      // If the whitelist exists when a new sale is created, enable the whitelist.\\n      if (address(reflexRouter) == _msgSender()) {\\n        isWhitelistEnabled = true;\\n      }\\n    } else if (whitelist != address(0) && !params.whitelisted) {\\n      whitelist = address(0);\\n    }\\n  }\\n\\n  /**\\n   * @notice If the presale isn't running will direct any received payments straight to the reflexRouter\\n   */\\n  receive() external payable {\\n    require(tokenB == address(0));\\n    _deposit(_msgSender(), msg.value);\\n  }\\n\\n  function setSaleUpdateApproved() external {\\n    require(address(reflexRouter) == _msgSender(), \\\"only reflex router\\\");\\n\\n    isSaleUpdateApproved = true;\\n  }\\n\\n  function deposited() external view returns (uint256) {\\n    return accountsDeposited(_msgSender());\\n  }\\n\\n  function accountsDeposited(address account) public view returns (uint256) {\\n    return _deposited[account];\\n  }\\n\\n  function userTokenAAmount(address account) public view returns (uint256) {\\n    uint256 userTokenBDeposit = accountsDeposited(account);\\n\\n    return getTokenAAmount(userTokenBDeposit, presaleRate);\\n  }\\n\\n  function setRunner(address _runner) external isAdmin {\\n    runner = _runner;\\n  }\\n\\n  function getRunner() external view returns (address) {\\n    return runner;\\n  }\\n\\n  function isWhitelisted() external view returns (bool) {\\n    return whitelist != address(0);\\n  }\\n\\n  function userWhitelisted() external view returns (bool) {\\n    return _userWhitelisted(_msgSender());\\n  }\\n\\n  function _userWhitelisted(address account) public view returns (bool) {\\n    if (whitelist != address(0)) {\\n      return Whitelist(whitelist).isWhitelisted(account);\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  function enableWhitelist() external isAdmin {\\n    if (!isWhitelistEnabled) {\\n      isWhitelistEnabled = true;\\n    }\\n  }\\n\\n  function disableWhitelist() external isAdmin {\\n    if (isWhitelistEnabled) {\\n      isWhitelistEnabled = false;\\n    }\\n  }\\n\\n  function resetWhitelist() external isAdmin {\\n    if (whitelist != address(0)) {\\n      whitelist = address(new TransparentUpgradeableProxy(whitelistImpl, proxyAdmin, new bytes(0)));\\n      Whitelist(whitelist).initialize();\\n    }\\n  }\\n\\n  function setWhitelist() external isAdmin {\\n    require(block.timestamp < start, \\\"Sale started\\\");\\n    require(whitelist == address(0), \\\"There is already a whitelist!\\\");\\n    whitelist = address(new TransparentUpgradeableProxy(whitelistImpl, proxyAdmin, new bytes(0)));\\n    Whitelist(whitelist).initialize();\\n  }\\n\\n  function removeWhitelist() external isAdmin {\\n    require(block.timestamp < start, \\\"Sale started\\\");\\n    require(whitelist != address(0), \\\"There isn't a whitelist set\\\");\\n    whitelist = address(0);\\n  }\\n\\n  function addToWhitelist(address[] memory users) external isAdmin {\\n    require(block.timestamp < end, \\\"Sale ended\\\");\\n    Whitelist(whitelist).addToWhitelist(users);\\n  }\\n\\n  function removeFromWhitelist(address[] memory addrs) external isAdmin {\\n    require(block.timestamp < start, \\\"Sale started\\\");\\n    Whitelist(whitelist).removeFromWhitelist(addrs);\\n  }\\n\\n  function cancel() external isAdmin {\\n    require(!launched, \\\"Sale has launched\\\");\\n    end = block.timestamp;\\n    canceled = true;\\n\\n    reflexRouter.onStatusChange(IReflexRouter01.SaleStatus.Canceled);\\n  }\\n\\n  /**\\n   * @notice For users to deposit into the sale\\n   * @dev This entitles _msgSender() to (amount * presaleRate) after a successful sale\\n   */\\n  function deposit(uint256 amount) external payable {\\n    if (tokenB == address(0)) {\\n      _deposit(_msgSender(), msg.value);\\n    } else {\\n      TransferHelper.safeTransferFrom(tokenB, msg.sender, address(this), amount);\\n      _deposit(_msgSender(), amount);\\n    }\\n  }\\n\\n  /**\\n   * @notice\\n   */\\n  function _deposit(address user, uint256 amount) internal {\\n    require(!canceled, \\\"Sale is canceled\\\");\\n    require(running(), \\\"Sale isn't running!\\\");\\n    require(canStart(), \\\"Token balance isn't topped up!\\\");\\n    require(amount >= min, \\\"Amount must be above min\\\");\\n    require(amount <= max, \\\"Amount must be below max\\\");\\n\\n    require(raised.add(amount) <= hardCap, \\\"Cant exceed hard cap\\\");\\n    require(_deposited[user].add(amount) <= max, \\\"Cant deposit more than the max\\\");\\n    if (whitelist != address(0) && isWhitelistEnabled) {\\n      require(Whitelist(whitelist).isWhitelisted(user), \\\"User not whitelisted\\\");\\n    }\\n\\n    if (raised < softCap && raised.add(amount) >= softCap) {\\n      reflexRouter.onStatusChange(IReflexRouter01.SaleStatus.Raised);\\n    }\\n\\n    _deposited[user] = _deposited[user].add(amount);\\n    raised = raised.add(amount);\\n  }\\n\\n  /**\\n   * @notice Finishes the sale, and if successful launches to PancakeSwap\\n   */\\n  function finalize() external isAdmin isSuccessful {\\n    end = block.timestamp;\\n\\n    // First take the developer cut\\n    uint256 devTokenB = raised.mul(reflexRouter.launchingFeeInTokenB()).div(1e4);\\n    uint256 devTokenA = getTokenAAmount(raised, presaleRate).mul(reflexRouter.launchingFeeInTokenA()).div(1e4);\\n    if (tokenB == address(0)) {\\n      TransferHelper.safeTransferETH(treasury, devTokenB);\\n    } else {\\n      TransferHelper.safeTransfer(tokenB, treasury, devTokenB);\\n    }\\n    TransferHelper.safeTransfer(tokenA, treasury, devTokenA);\\n\\n    uint256 liquidityTokenB;\\n    if (!privateSale) {\\n      // Find a percentage (i.e. 50%) of the leftover 99% liquidity\\n      // Dev fee is cut from the liquidity\\n      liquidityTokenB = raised.mul(liquidity).div(1e4).sub(devTokenB);\\n      uint256 tokenAForLiquidity = getTokenAAmount(liquidityTokenB, listingRate);\\n\\n      // Add the tokens and the BNB to the liquidity pool, satisfying the listing rate as the starting price point\\n      TransferHelper.safeApprove(tokenA, address(exchangeRouter), tokenAForLiquidity);\\n\\n      if (tokenB == address(0)) {\\n        exchangeRouter.addLiquidityETH{value: liquidityTokenB}(\\n          tokenA,\\n          tokenAForLiquidity,\\n          0,\\n          0,\\n          _msgSender(),\\n          block.timestamp.add(300)\\n        );\\n        lpToken = IUniswapV2Factory(exchangeRouter.factory()).getPair(tokenA, exchangeRouter.WETH());\\n      } else {\\n        TransferHelper.safeApprove(tokenB, address(exchangeRouter), liquidityTokenB);\\n        exchangeRouter.addLiquidity(\\n          tokenA,\\n          tokenB,\\n          tokenAForLiquidity,\\n          liquidityTokenB,\\n          0,\\n          0,\\n          _msgSender(),\\n          block.timestamp.add(300)\\n        );\\n        lpToken = IUniswapV2Factory(exchangeRouter.factory()).getPair(tokenA, tokenB);\\n      }\\n    }\\n\\n    // Send the sale runner the reamining BNB/tokens\\n    if (tokenB == address(0)) {\\n      TransferHelper.safeTransferETH(_msgSender(), raised.sub(liquidityTokenB).sub(devTokenB));\\n    } else {\\n      TransferHelper.safeTransfer(tokenB, _msgSender(), raised.sub(liquidityTokenB).sub(devTokenB));\\n    }\\n\\n    // Send the remaining sale tokens\\n    uint256 soldTokens = getTokenAAmount(raised, presaleRate);\\n    uint256 remaining = IERC20Upgradeable(tokenA).balanceOf(address(this)) - soldTokens;\\n    if (!privateSale && burn) {\\n      TransferHelper.safeTransfer(tokenA, 0x000000000000000000000000000000000000dEaD, remaining);\\n    } else {\\n      TransferHelper.safeTransfer(tokenA, msg.sender, remaining);\\n    }\\n\\n    launched = true;\\n    reflexRouter.onStatusChange(IReflexRouter01.SaleStatus.Launched);\\n  }\\n\\n  /**\\n   * @notice For users to withdraw from a sale\\n   * @dev This entitles _msgSender() to (amount * presaleRate) after a successful sale\\n   */\\n  function withdraw() external isEnded {\\n    require(_deposited[_msgSender()] > 0, \\\"User didnt partake\\\");\\n\\n    uint256 amount = _deposited[_msgSender()];\\n    _deposited[_msgSender()] = 0;\\n\\n    // If the sale was successful, then we give the user their tokens only once the sale has been finalized and launched\\n    // Otherwise return to them the full amount of BNB/tokens that they pledged for this sale!\\n    if (successful()) {\\n      require(launched, \\\"Sale hasnt finalized\\\");\\n      uint256 tokens = getTokenAAmount(amount, presaleRate);\\n      TransferHelper.safeTransfer(tokenA, _msgSender(), tokens);\\n    } else if (failed()) {\\n      if (tokenB == address(0)) {\\n        payable(msg.sender).transfer(amount);\\n      } else {\\n        IERC20Upgradeable(tokenB).safeTransfer(msg.sender, amount);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice For users to withdraw their deposited funds before the sale has been concluded\\n   * @dev This incurs a tax, where Reflex will take a cut of this tax\\n   */\\n  function earlyWithdraw() external {\\n    require(!canceled, \\\"Sale is canceled\\\");\\n    require(running(), \\\"Sale isn't running!\\\");\\n    require(canStart(), \\\"Token balance isn't topped up!\\\");\\n\\n    uint256 amount = _deposited[msg.sender];\\n    _deposited[msg.sender] = _deposited[msg.sender] - amount;\\n    raised = raised.sub(amount);\\n\\n    // The portion of the deposited tokens that will be taxed\\n    uint256 taxed = amount.mul(reflexRouter.earlyWithdrawPenalty()).div(1e4);\\n    uint256 returned = amount.sub(taxed);\\n\\n    if (tokenB == address(0)) {\\n      payable(msg.sender).transfer(returned);\\n      payable(treasury).transfer(taxed);\\n    } else {\\n      IERC20Upgradeable(tokenB).safeTransfer(msg.sender, returned);\\n      IERC20Upgradeable(tokenB).safeTransfer(treasury, taxed);\\n    }\\n  }\\n\\n  /**\\n   * @notice EMERGENCY USE ONLY: Lets the owner of the sale reclaim any stuck funds\\n   */\\n  function reclaim() external isAdmin {\\n    require(canceled, \\\"Sale hasn't been canceled\\\");\\n    TransferHelper.safeTransfer(tokenA, runner, IERC20Upgradeable(tokenA).balanceOf(address(this)));\\n  }\\n\\n  /**\\n   * @notice Withdraws BNB from the contract\\n   */\\n  function emergencyWithdrawBNB() external payable {\\n    require(owner == _msgSender(), \\\"Only owner\\\");\\n    payable(owner).transfer(address(this).balance);\\n  }\\n\\n  /**\\n   * @notice Withdraws tokens that are stuck\\n   */\\n  function emergencyWithdrawTokens(address _token) external payable {\\n    require(owner == _msgSender(), \\\"Only owner\\\");\\n    TransferHelper.safeTransfer(tokenA, owner, IERC20Upgradeable(tokenA).balanceOf(address(this)));\\n  }\\n\\n  function successful() public view returns (bool) {\\n    return raised >= softCap;\\n  }\\n\\n  function running() public view returns (bool) {\\n    return block.timestamp >= start && block.timestamp < end;\\n  }\\n\\n  function ended() public view returns (bool) {\\n    return block.timestamp >= end || launched;\\n  }\\n\\n  function failed() public view returns (bool) {\\n    return block.timestamp >= end || !successful();\\n  }\\n\\n  function canStart() public view returns (bool) {\\n    return IERC20Upgradeable(tokenA).balanceOf(address(this)) >= totalTokens;\\n  }\\n\\n  function getDecimals(address token) internal view returns (uint256) {\\n    return token == address(0) ? 18 : IERC20Extended(token).decimals();\\n  }\\n\\n  function getTokenAAmount(uint256 tokenBAmount, uint256 rateOfTokenAInTokenB) public view returns (uint256) {\\n    return\\n      tokenBAmount.mul(rateOfTokenAInTokenB).mul(10**getDecimals(tokenA)).div(ACCURACY).div(10**getDecimals(tokenB));\\n  }\\n\\n  function getTokenBAmount(uint256 tokenAAmount, uint256 rateOfTokenAInTokenB) public view returns (uint256) {\\n    return\\n      tokenAAmount.mul(ACCURACY).mul(10**getDecimals(tokenB)).div(rateOfTokenAInTokenB).div(10**getDecimals(tokenA));\\n  }\\n\\n  function getSaleParams() external view returns (IReflexSale01.SaleParams memory) {\\n    return saleParams;\\n  }\\n}\\n\",\"keccak256\":\"0xfaa75513a45b9f2e0204a26ecd2c69c75d4fc8aef32b5d6df72bf24d2c179e2e\",\"license\":\"MIT\"},\"contracts/Whitelist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract Whitelist is Initializable, OwnableUpgradeable {\\n  /// @notice Count of users participating in whitelisting\\n  uint256 public totalUsers;\\n\\n  // Users list\\n  address[] internal userlist;\\n  mapping(address => uint256) internal indexOf;\\n  mapping(address => bool) internal inserted;\\n\\n  /// @notice An event emitted when a user is added or removed. True: Added, False: Removed\\n  event AddedOrRemoved(bool added, address indexed user, uint256 timestamp);\\n\\n  function initialize() external initializer {\\n    __Ownable_init();\\n  }\\n\\n  /**\\n   * @notice Return the number of users\\n   */\\n  function usersCount() external view returns (uint256) {\\n    return userlist.length;\\n  }\\n\\n  /**\\n   * @notice Add users to white list\\n   * @dev Only owner can do this operation\\n   * @param users List of user data\\n   */\\n  function addToWhitelist(address[] memory users) external onlyOwner {\\n    for (uint256 i = 0; i < users.length; i++) {\\n      address user = users[i];\\n\\n      if (inserted[user] == false) {\\n        inserted[user] = true;\\n        indexOf[user] = userlist.length;\\n        userlist.push(user);\\n      }\\n\\n      emit AddedOrRemoved(true, user, block.timestamp);\\n    }\\n    totalUsers = userlist.length;\\n  }\\n\\n  /**\\n   * @notice Remove from white lsit\\n   * @dev Only owner can do this operation\\n   * @param addrs addresses to be removed\\n   */\\n  function removeFromWhitelist(address[] memory addrs) external onlyOwner {\\n    for (uint256 i = 0; i < addrs.length; i++) {\\n      // Ignore for non-existing users\\n      if (inserted[addrs[i]] == true) {\\n        delete inserted[addrs[i]];\\n\\n        uint256 index = indexOf[addrs[i]];\\n        uint256 lastIndex = userlist.length - 1;\\n        address lastUser = userlist[lastIndex];\\n\\n        indexOf[lastUser] = index;\\n        delete indexOf[addrs[i]];\\n\\n        userlist[index] = lastUser;\\n        userlist.pop();\\n\\n        emit AddedOrRemoved(false, addrs[i], block.timestamp);\\n      }\\n    }\\n    totalUsers = userlist.length;\\n  }\\n\\n  /**\\n   * @notice Return whitelisted user info\\n   * @param _user user wallet address\\n   * @return user wallet, kyc status, max allocation\\n   */\\n  function isWhitelisted(address _user) external view returns (bool) {\\n    return inserted[_user];\\n  }\\n}\\n\",\"keccak256\":\"0xaed8879f1db8da9049584f81fd2a1016706cd9dbaaea099c9b520e7ca6115fc0\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Extended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\ninterface IERC20Extended {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the token decimals.\\n   */\\n  function decimals() external view returns (uint8);\\n\\n  /**\\n   * @dev Returns the token symbol.\\n   */\\n  function symbol() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the token name.\\n   */\\n  function name() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address _owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6337ba6dc8b87915b28be62348b6fdb79ee3167333aca16c9623656c855c5129\",\"license\":\"MIT\"},\"contracts/interfaces/IReflexRouter01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\ninterface IReflexRouter01 {\\n  enum SaleStatus {\\n    Prepared,\\n    Launched,\\n    Canceled,\\n    Raised,\\n    Failed\\n  }\\n\\n  function onStatusChange(SaleStatus status) external;\\n\\n  // Reflex interface\\n  function launchingFeeInTokenA() external view returns (uint256);\\n\\n  function launchingFeeInTokenB() external view returns (uint256);\\n\\n  function earlyWithdrawPenalty() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x668c05368dd5b86ee71f3e58b85457e1d759528f1dfc4e64972178b4e4203e7e\",\"license\":\"MIT\"},\"contracts/interfaces/IReflexSale01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\ninterface IReflexSale01 {\\n  struct SaleParams {\\n    uint256 soft;\\n    uint256 hard;\\n    uint256 min;\\n    uint256 max;\\n    uint256 presaleRate;\\n    uint256 listingRate;\\n    uint256 liquidity;\\n    uint256 start;\\n    uint256 end;\\n    // uint256 unlockTime;\\n    bool whitelisted;\\n    bool burn;\\n    bool privateSale;\\n    string metaInfo;\\n  }\\n\\n  function launched() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4b7cb9d1a1bd6d7fb90aba7437726ae4c50a972d7f0c2f20a1828b0a6bb697a3\",\"license\":\"MIT\"},\"contracts/interfaces/uniswap/IUniswapV2Factory.sol\":{\"content\":\"// solhint-disable-next-line\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n  event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n  function feeTo() external view returns (address);\\n\\n  function feeToSetter() external view returns (address);\\n\\n  function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n  function allPairs(uint256) external view returns (address pair);\\n\\n  function allPairsLength() external view returns (uint256);\\n\\n  function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n  function setFeeTo(address) external;\\n\\n  function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xfdb521e1d49e653944b5466c2281289bb8e704e762ef2db150ff68c3596ac00d\"},\"contracts/interfaces/uniswap/IUniswapV2Router01.sol\":{\"content\":\"// solhint-disable-next-line\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n  function factory() external pure returns (address);\\n\\n  function WETH() external pure returns (address);\\n\\n  function addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 amountADesired,\\n    uint256 amountBDesired,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    returns (\\n      uint256 amountA,\\n      uint256 amountB,\\n      uint256 liquidity\\n    );\\n\\n  function addLiquidityETH(\\n    address token,\\n    uint256 amountTokenDesired,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    payable\\n    returns (\\n      uint256 amountToken,\\n      uint256 amountETH,\\n      uint256 liquidity\\n    );\\n\\n  function removeLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountA, uint256 amountB);\\n\\n  function removeLiquidityETH(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n  function removeLiquidityWithPermit(\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountA, uint256 amountB);\\n\\n  function removeLiquidityETHWithPermit(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n  function swapExactTokensForTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapTokensForExactTokens(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapExactETHForTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256[] memory amounts);\\n\\n  function swapTokensForExactETH(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapExactTokensForETH(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapETHForExactTokens(\\n    uint256 amountOut,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256[] memory amounts);\\n\\n  function quote(\\n    uint256 amountA,\\n    uint256 reserveA,\\n    uint256 reserveB\\n  ) external pure returns (uint256 amountB);\\n\\n  function getAmountOut(\\n    uint256 amountIn,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) external pure returns (uint256 amountOut);\\n\\n  function getAmountIn(\\n    uint256 amountOut,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) external pure returns (uint256 amountIn);\\n\\n  function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n  function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0xf116eed87df5b3332b37b6489252d2a353c937bc1ede5c9074f89ed1e4520470\"},\"contracts/interfaces/uniswap/IUniswapV2Router02.sol\":{\"content\":\"// solhint-disable-next-line\\npragma solidity >=0.6.2;\\n\\nimport \\\"./IUniswapV2Router01.sol\\\";\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountETH);\\n\\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountETH);\\n\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n\\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable;\\n\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n}\\n\",\"keccak256\":\"0x85d02ff054bd9c0450940f8165f6191fabe0b4f92a2d1b5b732828475628e7b1\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// solhint-disable-next-line\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n  function safeApprove(\\n    address token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    // bytes4(keccak256(bytes('approve(address,uint256)')));\\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n    require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeApprove: approve failed\\\");\\n  }\\n\\n  function safeTransfer(\\n    address token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n    require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeTransfer: transfer failed\\\");\\n  }\\n\\n  function safeTransferFrom(\\n    address token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n    require(\\n      success && (data.length == 0 || abi.decode(data, (bool))),\\n      \\\"TransferHelper::transferFrom: transferFrom failed\\\"\\n    );\\n  }\\n\\n  function safeTransferETH(address to, uint256 value) internal {\\n    (bool success, ) = to.call{value: value}(new bytes(0));\\n    require(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x1bfdd3ec66c051ad0d4a4c5ad88c23769b7220d13583da6f7d74d5a7d546a174\",\"license\":\"GPL-3.0-or-later\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615a67806100206000396000f3fe608060405260043610620004a85760003560e01c80638091f3bf1162000272578063ba414fa6116200015d578063ec30903811620000ca578063f26b854f1162000095578063fb86a4041162000078578063fb86a4041462000cda578063fbcd9b051462000cf2578063fbf6d2e31462000d0d57600080fd5b8063f26b854f1462000cb8578063f88979451462000cc257600080fd5b8063ec3090381462000c58578063eef49ee31462000c70578063efbe1c1c1462000c88578063f0ea4bfc1462000ca057600080fd5b8063d6b0f4841162000128578063e1d03ecf116200010b578063e1d03ecf1462000bed578063e498bd8b1462000c0f578063ea8a1af01462000c4057600080fd5b8063d6b0f4841462000bbd578063d85bd5261462000bd557600080fd5b8063ba414fa61462000b3b578063be9a65551462000b53578063c1d0ea221462000b6b578063cdfb2b4e1462000ba557600080fd5b80639a9e3fd811620001fc578063b4ee86f611620001c7578063b70aeaf411620001aa578063b70aeaf41462000ad9578063b923b2051462000b00578063ba1f879f1462000b1857600080fd5b8063b4ee86f61462000aa6578063b6b55f251462000ac257600080fd5b80639a9e3fd81462000a435780639b693b241462000a5f578063a20ecbbb1462000a77578063b2af127c1462000a8f57600080fd5b80638aae995a116200023d5780638aae995a14620009cf5780638da5cb5b14620009e7578063906a26e01462000a0957806393e59dc11462000a2157600080fd5b80638091f3bf146200094c5780638092db55146200096f57806380e9071b146200099257806382fe3aca14620009aa57600080fd5b806342f3938111620003935780635fcbd285116200031d57806370baed4311620002e85780637a8ca61511620002cb5780637a8ca61514620008ed5780637e1c0c09146200090f5780637f649783146200092757600080fd5b806370baed4314620008b05780637243460e14620008c857600080fd5b80635fcbd2851462000832578063611b4095146200085457806361d027b314620008765780636ac5db19146200089857600080fd5b8063548db174116200035e578063548db17414620007ae578063570d3e2514620007d35780635909865a14620007f85780635f64b55b146200081057600080fd5b806342f39381146200073457806344df8e70146200074c5780634bb278f3146200076f578063527203e3146200078757600080fd5b806317ff407c11620004325780631cb8581811620003fd5780633ccfd60b11620003e05780633ccfd60b14620006d75780633e47158c14620006ef5780633f9942ff146200071157600080fd5b80631cb8581814620006905780631dd62ef714620006b257600080fd5b806317ff407c146200060c578063184d69ab146200063f578063193e851214620006605780631a686502146200067857600080fd5b806314f10d92116200047357806314f10d92146200058357806315d74bb314620005b757806316a7891014620005cf57806317f708fb14620005f457600080fd5b80630238c6da14620004d95780630974485014620005185780630fc63d10146200053857806312fa6feb146200055a57600080fd5b36620004d4576046546001600160a01b031615620004c557600080fd5b620004d2335b3462000d32565b005b600080fd5b348015620004e657600080fd5b50603654620004fb906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156200052557600080fd5b506034546001600160a01b0316620004fb565b3480156200054557600080fd5b50604554620004fb906001600160a01b031681565b3480156200056757600080fd5b506200057262001184565b60405190151581526020016200050f565b3480156200059057600080fd5b50620005a8620005a23660046200415d565b620011a6565b6040519081526020016200050f565b348015620005c457600080fd5b50620004d2620011d4565b348015620005dc57600080fd5b5062000572620005ee3660046200415d565b62001470565b3480156200060157600080fd5b50620004d262001509565b3480156200061957600080fd5b506200062462001636565b6040516200050f9d9c9b9a99989796959493929190620041da565b3480156200064c57600080fd5b506058546200057290610100900460ff1681565b3480156200066d57600080fd5b50620004d262001718565b3480156200068557600080fd5b50620005a8604d5481565b3480156200069d57600080fd5b50603854620004fb906001600160a01b031681565b348015620006bf57600080fd5b50620004d2620006d136600462004362565b62001783565b348015620006e457600080fd5b50620004d262001b8d565b348015620006fc57600080fd5b50603754620004fb906001600160a01b031681565b3480156200071e57600080fd5b506052546200057290600160b01b900460ff1681565b3480156200074157600080fd5b50620005a8604b5481565b3480156200075957600080fd5b506050546200057290600160a01b900460ff1681565b3480156200077c57600080fd5b50620004d262001d56565b3480156200079457600080fd5b506200079f62002686565b6040516200050f919062004474565b348015620007bb57600080fd5b50620004d2620007cd36600462004539565b6200281e565b348015620007e057600080fd5b50620004d2620007f23660046200415d565b62002948565b3480156200080557600080fd5b50620004d2620029e9565b3480156200081d57600080fd5b50604654620004fb906001600160a01b031681565b3480156200083f57600080fd5b50603954620004fb906001600160a01b031681565b3480156200086157600080fd5b506050546001600160a01b0316151562000572565b3480156200088357600080fd5b50605254620004fb906001600160a01b031681565b348015620008a557600080fd5b50620005a8604a5481565b348015620008bd57600080fd5b50620005a860555481565b348015620008d557600080fd5b50620005a8620008e7366004620045f8565b62002b64565b348015620008fa57600080fd5b50603454620004fb906001600160a01b031681565b3480156200091c57600080fd5b50620005a860535481565b3480156200093457600080fd5b50620004d26200094636600462004539565b62002bce565b3480156200095957600080fd5b506052546200057290600160a81b900460ff1681565b3480156200097c57600080fd5b506052546200057290600160a01b900460ff1681565b3480156200099f57600080fd5b50620004d262002cd2565b348015620009b757600080fd5b50620004d2620009c93660046200461b565b62002e28565b348015620009dc57600080fd5b50620005a860545481565b348015620009f457600080fd5b50603354620004fb906001600160a01b031681565b34801562000a1657600080fd5b50620005a860475481565b34801562000a2e57600080fd5b50605054620004fb906001600160a01b031681565b34801562000a5057600080fd5b50604754605654101562000572565b34801562000a6c57600080fd5b506200057262002fc7565b34801562000a8457600080fd5b50620005a8604c5481565b620004d262000aa03660046200415d565b62002fd4565b34801562000ab357600080fd5b50605854620005729060ff1681565b620004d262000ad336600462004710565b6200305a565b34801562000ae657600080fd5b5062000af16200309c565b6040516200050f91906200472a565b34801562000b0d57600080fd5b50620004d262003132565b34801562000b2557600080fd5b506050546200057290600160a81b900460ff1681565b34801562000b4857600080fd5b506200057262003269565b34801562000b6057600080fd5b50620005a8604e5481565b34801562000b7857600080fd5b50620005a862000b8a3660046200415d565b6001600160a01b031660009081526057602052604090205490565b34801562000bb257600080fd5b50620004d262003283565b34801562000bca57600080fd5b50620004d262003323565b34801562000be257600080fd5b5062000572620033c0565b34801562000bfa57600080fd5b50603554620004fb906001600160a01b031681565b34801562000c1c57600080fd5b50620005a862000c2e3660046200415d565b60576020526000908152604090205481565b34801562000c4d57600080fd5b50620004d2620033d9565b34801562000c6557600080fd5b506200057262003534565b34801562000c7d57600080fd5b50620005a8620035af565b34801562000c9557600080fd5b50620005a8604f5481565b34801562000cad57600080fd5b50620005a860565481565b620004d2620035bc565b34801562000ccf57600080fd5b50620005a860495481565b34801562000ce757600080fd5b50620005a860485481565b34801562000cff57600080fd5b50620005a86402540be40081565b34801562000d1a57600080fd5b50620005a862000d2c366004620045f8565b6200363f565b605254600160b01b900460ff161562000d855760405162461bcd60e51b815260206004820152601060248201526f14d85b19481a5cc818d85b98d95b195960821b60448201526064015b60405180910390fd5b62000d8f620033c0565b62000ddd5760405162461bcd60e51b815260206004820152601360248201527f53616c652069736e27742072756e6e696e672100000000000000000000000000604482015260640162000d7c565b62000de762003534565b62000e355760405162461bcd60e51b815260206004820152601e60248201527f546f6b656e2062616c616e63652069736e277420746f70706564207570210000604482015260640162000d7c565b60495481101562000e895760405162461bcd60e51b815260206004820152601860248201527f416d6f756e74206d7573742062652061626f7665206d696e0000000000000000604482015260640162000d7c565b604a5481111562000edd5760405162461bcd60e51b815260206004820152601860248201527f416d6f756e74206d7573742062652062656c6f77206d61780000000000000000604482015260640162000d7c565b60485460565462000eef9083620036a9565b111562000f3f5760405162461bcd60e51b815260206004820152601460248201527f43616e7420657863656564206861726420636170000000000000000000000000604482015260640162000d7c565b604a546001600160a01b03831660009081526057602052604090205462000f679083620036a9565b111562000fb75760405162461bcd60e51b815260206004820152601e60248201527f43616e74206465706f736974206d6f7265207468616e20746865206d61780000604482015260640162000d7c565b6050546001600160a01b03161580159062000fd95750605854610100900460ff165b156200109e57605054604051633af32abf60e01b81526001600160a01b03848116600483015290911690633af32abf90602401602060405180830381865afa1580156200102a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200105091906200473f565b6200109e5760405162461bcd60e51b815260206004820152601460248201527f55736572206e6f742077686974656c6973746564000000000000000000000000604482015260640162000d7c565b604754605654108015620010c25750604754605654620010bf9083620036a9565b10155b156200113057603554604051634530ffb760e11b81526001600160a01b0390911690638a61ff6e90620010fb906003906004016200475f565b600060405180830381600087803b1580156200111657600080fd5b505af11580156200112b573d6000803e3d6000fd5b505050505b6001600160a01b038216600090815260576020526040902054620011559082620036a9565b6001600160a01b0383166000908152605760205260409020556056546200117d9082620036a9565b6056555050565b6000604f5442101580620011a15750605254600160a81b900460ff165b905090565b6001600160a01b038116600090815260576020526040812054620011cd81604b546200363f565b9392505050565b605254600160b01b900460ff1615620012235760405162461bcd60e51b815260206004820152601060248201526f14d85b19481a5cc818d85b98d95b195960821b604482015260640162000d7c565b6200122d620033c0565b6200127b5760405162461bcd60e51b815260206004820152601360248201527f53616c652069736e27742072756e6e696e672100000000000000000000000000604482015260640162000d7c565b6200128562003534565b620012d35760405162461bcd60e51b815260206004820152601e60248201527f546f6b656e2062616c616e63652069736e277420746f70706564207570210000604482015260640162000d7c565b33600090815260576020526040902054620012ef81806200479e565b336000908152605760205260409020556056546200130e9082620036b7565b6056556035546040805163d29004d960e01b815290516000926200139f926127109262001398926001600160a01b03169163d29004d99160048083019260209291908290030181865afa1580156200136a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620013909190620047b8565b8590620036c5565b90620036d3565b90506000620013af8383620036b7565b6046549091506001600160a01b03166200143357604051339082156108fc029083906000818181858888f19350505050158015620013f1573d6000803e3d6000fd5b506052546040516001600160a01b039091169083156108fc029084906000818181858888f193505050501580156200142d573d6000803e3d6000fd5b50505050565b6046546200144c906001600160a01b03163383620036e1565b6052546046546200146b916001600160a01b03918216911684620036e1565b505050565b6050546000906001600160a01b031615620014fc57605054604051633af32abf60e01b81526001600160a01b03848116600483015290911690633af32abf90602401602060405180830381865afa158015620014d0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620014f691906200473f565b92915050565b506000919050565b919050565b6035546001600160a01b03163314806200152d57506033546001600160a01b031633145b806200154357506034546001600160a01b031633145b620015885760405162461bcd60e51b815260206004820152601460248201527321b0b63632b91034b9b73a1030b71030b236b4b760611b604482015260640162000d7c565b604e544210620015ca5760405162461bcd60e51b815260206004820152600c60248201526b14d85b19481cdd185c9d195960a21b604482015260640162000d7c565b6050546001600160a01b0316620016245760405162461bcd60e51b815260206004820152601b60248201527f54686572652069736e277420612077686974656c697374207365740000000000604482015260640162000d7c565b605080546001600160a01b0319169055565b603a8054603b54603c54603d54603e54603f54604054604154604254604354604480549a9b999a989997989697959694959394929360ff80841694610100850482169462010000900490911692906200168f90620047d2565b80601f0160208091040260200160405190810160405280929190818152602001828054620016bd90620047d2565b80156200170e5780601f10620016e2576101008083540402835291602001916200170e565b820191906000526020600020905b815481529060010190602001808311620016f057829003601f168201915b505050505090508d565b6035546001600160a01b03163314620017745760405162461bcd60e51b815260206004820152601260248201527f6f6e6c79207265666c657820726f757465720000000000000000000000000000604482015260640162000d7c565b6058805460ff19166001179055565b6035546001600160a01b0316331480620017a757506033546001600160a01b031633145b80620017bd57506034546001600160a01b031633145b620018025760405162461bcd60e51b815260206004820152601460248201527321b0b63632b91034b9b73a1030b71030b236b4b760611b604482015260640162000d7c565b6034546001600160a01b0316331415620018755760585460ff166200186a5760405162461bcd60e51b815260206004820152601860248201527f73616c6520757064617465206e6f7420617070726f7665640000000000000000604482015260640162000d7c565b6058805460ff191690555b8051603a908155602080830151603b55604080840151603c556060840151603d556080840151603e5560a0840151603f5560c0840151905560e0830151604155610100808401516042556101208401516043805461014087015161016088015161ffff1990921693151561ff001916939093179215159093029190911762ff0000191662010000921515929092029190911790556101808301518051849392620019259260449291019062004086565b5050815160475550602081015160485560408101516049556060810151604a556080810151604b5560a0810151604c55610160810151620019695760c0810151604d555b60e0810151604e55610100810151604f55610140810151605080546101608401511515600160a81b0260ff60a81b19931515600160a01b02939093167fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff90911617919091179055604854604b54620019e291906200363f565b605455605054600160a81b900460ff1662001a205762001a1c61271062001398604d5462001a15604854604c546200363f565b90620036c5565b6055555b60555460545462001a3191620036a9565b6053556050546001600160a01b031615801562001a5057508061012001515b1562001b5657603654603754604080516000815260208101918290526001600160a01b0393841693909216919062001a889062004115565b62001a96939291906200480f565b604051809103906000f08015801562001ab3573d6000803e3d6000fd5b50605080546001600160a01b0319166001600160a01b039290921691821790556040805163204a7f0760e21b81529051638129fc1c9160048082019260009290919082900301818387803b15801562001b0b57600080fd5b505af115801562001b20573d6000803e3d6000fd5b5050505062001b2c3390565b6035546001600160a01b039081169116141562001b53576058805461ff0019166101001790555b50565b6050546001600160a01b03161580159062001b745750806101200151155b1562001b5357605080546001600160a01b031916905550565b62001b9762001184565b62001be55760405162461bcd60e51b815260206004820152601060248201527f53616c65206861736e7420656e64656400000000000000000000000000000000604482015260640162000d7c565b3360009081526057602052604090205462001c435760405162461bcd60e51b815260206004820152601260248201527f55736572206469646e742070617274616b650000000000000000000000000000604482015260640162000d7c565b33600090815260576020526040812080549190556047546056541062001cee57605254600160a81b900460ff1662001cbe5760405162461bcd60e51b815260206004820152601460248201527f53616c65206861736e742066696e616c697a6564000000000000000000000000604482015260640162000d7c565b600062001cce82604b546200363f565b60455490915062001cea906001600160a01b0316338362003735565b5050565b62001cf862003269565b1562001b53576046546001600160a01b031662001d3d57604051339082156108fc029083906000818181858888f1935050505015801562001cea573d6000803e3d6000fd5b60465462001b53906001600160a01b03163383620036e1565b6035546001600160a01b031633148062001d7a57506033546001600160a01b031633145b8062001d9057506034546001600160a01b031633145b62001dd55760405162461bcd60e51b815260206004820152601460248201527321b0b63632b91034b9b73a1030b71030b236b4b760611b604482015260640162000d7c565b604754605654101562001e2b5760405162461bcd60e51b815260206004820152601660248201527f53616c652069736e2774207375636365737366756c2100000000000000000000604482015260640162000d7c565b42604f5560355460408051633a4c173160e11b8152905160009262001eb8926127109262001398926001600160a01b0316916374982e629160048083019260209291908290030181865afa15801562001e88573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001eae9190620047b8565b60565490620036c5565b9050600062001f5161271062001398603560009054906101000a90046001600160a01b03166001600160a01b031663e6fd885f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001f1b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001f419190620047b8565b62001a15605654604b546200363f565b6046549091506001600160a01b031662001f835760525462001f7d906001600160a01b03168362003879565b62001fa2565b60465460525462001fa2916001600160a01b0390811691168462003735565b60455460525462001fc1916001600160a01b0390811691168362003735565b605054600090600160a81b900460ff166200249957620020028362001ffb61271062001398604d54605654620036c590919063ffffffff16565b90620036b7565b905060006200201482604c546200363f565b60455460385491925062002036916001600160a01b0391821691168362003962565b6046546001600160a01b031662002293576038546045546001600160a01b039182169163f305d719918591168460008033620020754261012c620036a9565b60405160e089901b6001600160e01b03191681526001600160a01b039687166004820152602481019590955260448501939093526064840191909152909216608482015260a481019190915260c40160606040518083038185885af1158015620020e3573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906200210a919062004846565b50506038546040805163c45a015560e01b815290516001600160a01b03909216925063c45a01559160048083019260209291908290030181865afa15801562002157573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200217d919062004875565b604554603854604080516315ab88c960e31b815290516001600160a01b039485169463e6a4390594811693169163ad5c46489160048083019260209291908290030181865afa158015620021d5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620021fb919062004875565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa15801562002247573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200226d919062004875565b603980546001600160a01b0319166001600160a01b039290921691909117905562002497565b604654603854620022b2916001600160a01b0390811691168462003962565b6038546045546046546001600160a01b039283169263e8e337009281169116848660008033620022e54261012c620036a9565b60405160e08a901b6001600160e01b03191681526001600160a01b039889166004820152968816602488015260448701959095526064860193909352608485019190915260a484015290921660c482015260e4810191909152610104016060604051808303816000875af115801562002362573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002388919062004846565b50506038546040805163c45a015560e01b815290516001600160a01b03909216925063c45a01559160048083019260209291908290030181865afa158015620023d5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620023fb919062004875565b60455460465460405163e6a4390560e01b81526001600160a01b039283166004820152908216602482015291169063e6a4390590604401602060405180830381865afa15801562002450573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002476919062004875565b603980546001600160a01b0319166001600160a01b03929092169190911790555b505b6046546001600160a01b0316620024d757620024d133620024cb8562001ffb85605654620036b790919063ffffffff16565b62003879565b6200250b565b6046546200250b906001600160a01b031633620025058662001ffb86605654620036b790919063ffffffff16565b62003735565b60006200251d605654604b546200363f565b6045546040516370a0823160e01b815230600482015291925060009183916001600160a01b0316906370a0823190602401602060405180830381865afa1580156200256c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620025929190620047b8565b6200259e91906200479e565b605054909150600160a81b900460ff16158015620025c55750605054600160a01b900460ff165b15620025ec57604554620025e6906001600160a01b031661dead8362003735565b62002605565b60455462002605906001600160a01b0316338362003735565b6052805460ff60a81b1916600160a81b179055603554604051634530ffb760e11b81526001600160a01b0390911690638a61ff6e906200264b906001906004016200475f565b600060405180830381600087803b1580156200266657600080fd5b505af11580156200267b573d6000803e3d6000fd5b505050505050505050565b620026f8604051806101a00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600015158152602001600015158152602001600015158152602001606081525090565b604080516101a081018252603a80548252603b546020830152603c5482840152603d546060830152603e546080830152603f5460a0830152915460c082015260415460e08201526042546101008083019190915260435460ff80821615156101208501529181048216151561014084015262010000900416151561016082015260448054919291610180840191906200279190620047d2565b80601f0160208091040260200160405190810160405280929190818152602001828054620027bf90620047d2565b8015620028105780601f10620027e45761010080835404028352916020019162002810565b820191906000526020600020905b815481529060010190602001808311620027f257829003601f168201915b505050505081525050905090565b6035546001600160a01b03163314806200284257506033546001600160a01b031633145b806200285857506034546001600160a01b031633145b6200289d5760405162461bcd60e51b815260206004820152601460248201527321b0b63632b91034b9b73a1030b71030b236b4b760611b604482015260640162000d7c565b604e544210620028df5760405162461bcd60e51b815260206004820152600c60248201526b14d85b19481cdd185c9d195960a21b604482015260640162000d7c565b6050546040516315236c5d60e21b81526001600160a01b039091169063548db174906200291190849060040162004895565b600060405180830381600087803b1580156200292c57600080fd5b505af115801562002941573d6000803e3d6000fd5b5050505050565b6035546001600160a01b03163314806200296c57506033546001600160a01b031633145b806200298257506034546001600160a01b031633145b620029c75760405162461bcd60e51b815260206004820152601460248201527321b0b63632b91034b9b73a1030b71030b236b4b760611b604482015260640162000d7c565b603480546001600160a01b0319166001600160a01b0392909216919091179055565b6035546001600160a01b031633148062002a0d57506033546001600160a01b031633145b8062002a2357506034546001600160a01b031633145b62002a685760405162461bcd60e51b815260206004820152601460248201527321b0b63632b91034b9b73a1030b71030b236b4b760611b604482015260640162000d7c565b6050546001600160a01b03161562002b62576036546037546001600160a01b03918216911660005b6040519080825280601f01601f19166020018201604052801562002abb576020820181803683370190505b5060405162002aca9062004115565b62002ad8939291906200480f565b604051809103906000f08015801562002af5573d6000803e3d6000fd5b50605080546001600160a01b0319166001600160a01b039290921691821790556040805163204a7f0760e21b81529051638129fc1c9160048082019260009290919082900301818387803b15801562002b4d57600080fd5b505af11580156200142d573d6000803e3d6000fd5b565b604554600090620011cd9062002b83906001600160a01b031662003aa6565b62002b9090600a620049e1565b60465462001398908590829062002bb0906001600160a01b031662003aa6565b62002bbd90600a620049e1565b62001a15896402540be400620036c5565b6035546001600160a01b031633148062002bf257506033546001600160a01b031633145b8062002c0857506034546001600160a01b031633145b62002c4d5760405162461bcd60e51b815260206004820152601460248201527321b0b63632b91034b9b73a1030b71030b236b4b760611b604482015260640162000d7c565b604f54421062002ca05760405162461bcd60e51b815260206004820152600a60248201527f53616c6520656e64656400000000000000000000000000000000000000000000604482015260640162000d7c565b605054604051637f64978360e01b81526001600160a01b0390911690637f649783906200291190849060040162004895565b6035546001600160a01b031633148062002cf657506033546001600160a01b031633145b8062002d0c57506034546001600160a01b031633145b62002d515760405162461bcd60e51b815260206004820152601460248201527321b0b63632b91034b9b73a1030b71030b236b4b760611b604482015260640162000d7c565b605254600160b01b900460ff1662002dac5760405162461bcd60e51b815260206004820152601960248201527f53616c65206861736e2774206265656e2063616e63656c656400000000000000604482015260640162000d7c565b6045546034546040516370a0823160e01b815230600482015262002b62926001600160a01b0390811692169082906370a08231906024015b602060405180830381865afa15801562002e02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620025059190620047b8565b600054610100900460ff168062002e42575060005460ff16155b62002ea75760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840162000d7c565b600054610100900460ff1615801562002eca576000805461ffff19166101011790555b62002ed462003b2f565b603580546001600160a01b03199081166001600160a01b038e8116919091179092556033805482168d84161790556034805482168c84161790556045805482168b84161790556046805490911691891691909117905562002f39888c60001962003962565b603880546001600160a01b038089166001600160a01b031992831617909255603680548884169083161790556037805492871692909116919091179055825162002f8b90605190602086019062004086565b50605280546001600160a01b0319166001600160a01b038416179055801562002fba576000805461ff00191690555b5050505050505050505050565b6000620011a13362001470565b6033546001600160a01b031633146200301d5760405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b604482015260640162000d7c565b6045546033546040516370a0823160e01b815230600482015262001b53926001600160a01b0390811692169082906370a082319060240162002de4565b6046546001600160a01b0316620030765762001b5333620004cb565b60465462003090906001600160a01b031633308462003bf0565b62001b53338262000d32565b60518054620030ab90620047d2565b80601f0160208091040260200160405190810160405280929190818152602001828054620030d990620047d2565b80156200312a5780601f10620030fe576101008083540402835291602001916200312a565b820191906000526020600020905b8154815290600101906020018083116200310c57829003601f168201915b505050505081565b6035546001600160a01b03163314806200315657506033546001600160a01b031633145b806200316c57506034546001600160a01b031633145b620031b15760405162461bcd60e51b815260206004820152601460248201527321b0b63632b91034b9b73a1030b71030b236b4b760611b604482015260640162000d7c565b604e544210620031f35760405162461bcd60e51b815260206004820152600c60248201526b14d85b19481cdd185c9d195960a21b604482015260640162000d7c565b6050546001600160a01b0316156200324e5760405162461bcd60e51b815260206004820152601d60248201527f546865726520697320616c726561647920612077686974656c69737421000000604482015260640162000d7c565b6036546037546001600160a01b039182169116600062002a90565b6000604f5442101580620011a15750506047546056541090565b6035546001600160a01b0316331480620032a757506033546001600160a01b031633145b80620032bd57506034546001600160a01b031633145b620033025760405162461bcd60e51b815260206004820152601460248201527321b0b63632b91034b9b73a1030b71030b236b4b760611b604482015260640162000d7c565b605854610100900460ff1662002b62576058805461ff001916610100179055565b6035546001600160a01b03163314806200334757506033546001600160a01b031633145b806200335d57506034546001600160a01b031633145b620033a25760405162461bcd60e51b815260206004820152601460248201527321b0b63632b91034b9b73a1030b71030b236b4b760611b604482015260640162000d7c565b605854610100900460ff161562002b62576058805461ff0019169055565b6000604e544210158015620011a1575050604f54421090565b6035546001600160a01b0316331480620033fd57506033546001600160a01b031633145b806200341357506034546001600160a01b031633145b620034585760405162461bcd60e51b815260206004820152601460248201527321b0b63632b91034b9b73a1030b71030b236b4b760611b604482015260640162000d7c565b605254600160a81b900460ff1615620034b45760405162461bcd60e51b815260206004820152601160248201527f53616c6520686173206c61756e63686564000000000000000000000000000000604482015260640162000d7c565b42604f55605280547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff16600160b01b179055603554604051634530ffb760e11b81526001600160a01b0390911690638a61ff6e9062003519906002906004016200475f565b600060405180830381600087803b15801562002b4d57600080fd5b6053546045546040516370a0823160e01b8152306004820152600092916001600160a01b0316906370a0823190602401602060405180830381865afa15801562003582573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620035a89190620047b8565b1015905090565b6000620011a13362000b8a565b6033546001600160a01b03163314620036055760405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b604482015260640162000d7c565b6033546040516001600160a01b03909116904780156108fc02916000818181858888f1935050505015801562001b53573d6000803e3d6000fd5b604654600090620011cd906200365e906001600160a01b031662003aa6565b6200366b90600a620049e1565b60455462001398906402540be40090829062003690906001600160a01b031662003aa6565b6200369d90600a620049e1565b62001a158989620036c5565b6000620011cd8284620049ef565b6000620011cd82846200479e565b6000620011cd828462004a0a565b6000620011cd828462004a2c565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526200146b90849062003d44565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b179052915160009283929087169162003793919062004a4f565b6000604051808303816000865af19150503d8060008114620037d2576040519150601f19603f3d011682016040523d82523d6000602084013e620037d7565b606091505b509150915081801562003805575080511580620038055750808060200190518101906200380591906200473f565b620029415760405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201527f616e73666572206661696c656400000000000000000000000000000000000000606482015260840162000d7c565b604080516000808252602082019092526001600160a01b038416908390604051620038a5919062004a4f565b60006040518083038185875af1925050503d8060008114620038e4576040519150601f19603f3d011682016040523d82523d6000602084013e620038e9565b606091505b50509050806200146b5760405162461bcd60e51b815260206004820152603460248201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60448201527f20455448207472616e73666572206661696c6564000000000000000000000000606482015260840162000d7c565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b1790529151600092839290871691620039c0919062004a4f565b6000604051808303816000865af19150503d8060008114620039ff576040519150601f19603f3d011682016040523d82523d6000602084013e62003a04565b606091505b509150915081801562003a3257508051158062003a3257508080602001905181019062003a3291906200473f565b620029415760405162461bcd60e51b815260206004820152602b60248201527f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060448201527f726f7665206661696c6564000000000000000000000000000000000000000000606482015260840162000d7c565b60006001600160a01b0382161562003b2357816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801562003af7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003b1d919062004a6d565b62003b26565b60125b60ff1692915050565b600054610100900460ff168062003b49575060005460ff16155b62003bae5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840162000d7c565b600054610100900460ff1615801562003bd1576000805461ffff19166101011790555b62003bdb62003e30565b801562001b53576000805461ff001916905550565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b179052915160009283929088169162003c56919062004a4f565b6000604051808303816000865af19150503d806000811462003c95576040519150601f19603f3d011682016040523d82523d6000602084013e62003c9a565b606091505b509150915081801562003cc857508051158062003cc857508080602001905181019062003cc891906200473f565b62003d3c5760405162461bcd60e51b815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260448201527f616e7366657246726f6d206661696c6564000000000000000000000000000000606482015260840162000d7c565b505050505050565b600062003d9b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031662003ee69092919063ffffffff16565b8051909150156200146b578080602001905181019062003dbc91906200473f565b6200146b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840162000d7c565b600054610100900460ff168062003e4a575060005460ff16155b62003eaf5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840162000d7c565b600054610100900460ff1615801562003bdb576000805461ffff1916610101179055801562001b53576000805461ff001916905550565b606062003ef7848460008562003eff565b949350505050565b60608247101562003f795760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840162000d7c565b843b62003fc95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640162000d7c565b600080866001600160a01b0316858760405162003fe7919062004a4f565b60006040518083038185875af1925050503d806000811462004026576040519150601f19603f3d011682016040523d82523d6000602084013e6200402b565b606091505b50915091506200403d82828662004048565b979650505050505050565b6060831562004059575081620011cd565b8251156200406a5782518084602001fd5b8160405162461bcd60e51b815260040162000d7c91906200472a565b8280546200409490620047d2565b90600052602060002090601f016020900481019282620040b8576000855562004103565b82601f10620040d357805160ff191683800117855562004103565b8280016001018555821562004103579182015b8281111562004103578251825591602001919060010190620040e6565b506200411192915062004123565b5090565b610f9f8062004a9383390190565b5b8082111562004111576000815560010162004124565b6001600160a01b038116811462001b5357600080fd5b803562001504816200413a565b6000602082840312156200417057600080fd5b8135620011cd816200413a565b60005b838110156200419a57818101518382015260200162004180565b838111156200142d5750506000910152565b60008151808452620041c68160208601602086016200417d565b601f01601f19169290920160200192915050565b60006101a08f83528e60208401528d60408401528c60608401528b60808401528a60a08401528960c08401528860e084015287610100840152861515610120840152851515610140840152841515610160840152806101808401526200424381840185620041ac565b9150509e9d5050505050505050505050505050565b634e487b7160e01b600052604160045260246000fd5b6040516101a0810167ffffffffffffffff8111828210171562004295576200429562004258565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715620042c757620042c762004258565b604052919050565b801515811462001b5357600080fd5b80356200150481620042cf565b600082601f830112620042fd57600080fd5b813567ffffffffffffffff8111156200431a576200431a62004258565b6200432f601f8201601f19166020016200429b565b8181528460208386010111156200434557600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156200437557600080fd5b813567ffffffffffffffff808211156200438e57600080fd5b908301906101a08286031215620043a457600080fd5b620043ae6200426e565b823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e082015261010080840135818301525061012062004414818501620042de565b9082015261014062004428848201620042de565b908201526101606200443c848201620042de565b9082015261018083810135838111156200445557600080fd5b6200446388828701620042eb565b918301919091525095945050505050565b6020815281516020820152602082015160408201526040820151606082015260608201516080820152608082015160a082015260a082015160c082015260c082015160e0820152600060e0830151610100818185015280850151915050610120818185015280850151915050610140620044f18185018315159052565b8401519050610160620045078482018315159052565b84015190506101806200451d8482018315159052565b8401516101a084810152905062003ef76101c0840182620041ac565b600060208083850312156200454d57600080fd5b823567ffffffffffffffff808211156200456657600080fd5b818501915085601f8301126200457b57600080fd5b81358181111562004590576200459062004258565b8060051b9150620045a38483016200429b565b8181529183018401918481019088841115620045be57600080fd5b938501935b83851015620045ec5784359250620045db836200413a565b8282529385019390850190620045c3565b98975050505050505050565b600080604083850312156200460c57600080fd5b50508035926020909101359150565b6000806000806000806000806000806101408b8d0312156200463c57600080fd5b8a3562004649816200413a565b995060208b01356200465b816200413a565b985060408b01356200466d816200413a565b975060608b01356200467f816200413a565b965060808b013562004691816200413a565b9550620046a160a08c0162004150565b9450620046b160c08c0162004150565b9350620046c160e08c0162004150565b92506101008b013567ffffffffffffffff811115620046df57600080fd5b620046ed8d828e01620042eb565b925050620046ff6101208c0162004150565b90509295989b9194979a5092959850565b6000602082840312156200472357600080fd5b5035919050565b602081526000620011cd6020830184620041ac565b6000602082840312156200475257600080fd5b8151620011cd81620042cf565b60208101600583106200478257634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052601160045260246000fd5b600082821015620047b357620047b362004788565b500390565b600060208284031215620047cb57600080fd5b5051919050565b600181811c90821680620047e757607f821691505b602082108114156200480957634e487b7160e01b600052602260045260246000fd5b50919050565b60006001600160a01b038086168352808516602084015250606060408301526200483d6060830184620041ac565b95945050505050565b6000806000606084860312156200485c57600080fd5b8351925060208401519150604084015190509250925092565b6000602082840312156200488857600080fd5b8151620011cd816200413a565b6020808252825182820181905260009190848201906040850190845b81811015620048d85783516001600160a01b031683529284019291840191600101620048b1565b50909695505050505050565b600181815b808511156200492557816000190482111562004909576200490962004788565b808516156200491757918102915b93841c9390800290620048e9565b509250929050565b6000826200493e57506001620014f6565b816200494d57506000620014f6565b8160018114620049665760028114620049715762004991565b6001915050620014f6565b60ff84111562004985576200498562004788565b50506001821b620014f6565b5060208310610133831016604e8410600b8410161715620049b6575081810a620014f6565b620049c28383620048e4565b8060001904821115620049d957620049d962004788565b029392505050565b6000620011cd83836200492d565b6000821982111562004a055762004a0562004788565b500190565b600081600019048311821515161562004a275762004a2762004788565b500290565b60008262004a4a57634e487b7160e01b600052601260045260246000fd5b500490565b6000825162004a638184602087016200417d565b9190910192915050565b60006020828403121562004a8057600080fd5b815160ff81168114620011cd57600080fdfe608060405260405162000f9f38038062000f9f833981016040819052620000269162000507565b82816200005560017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd620005e7565b60008051602062000f58833981519152146200007557620000756200060d565b6200008382826000620000e7565b50620000b3905060017fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6104620005e7565b60008051602062000f3883398151915214620000d357620000d36200060d565b620000de8262000124565b50505062000676565b620000f2836200017f565b600082511180620001005750805b156200011f576200011d8383620001c160201b620002701760201c565b505b505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6200014f620001f0565b604080516001600160a01b03928316815291841660208301520160405180910390a16200017c8162000229565b50565b6200018a81620002de565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060620001e9838360405180606001604052806027815260200162000f786027913962000381565b9392505050565b60006200021a60008051602062000f3883398151915260001b6200045e60201b620002181760201c565b546001600160a01b0316919050565b6001600160a01b038116620002945760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b80620002bd60008051602062000f3883398151915260001b6200045e60201b620002181760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b620002f4816200046160201b6200029c1760201c565b620003585760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016200028b565b80620002bd60008051602062000f5883398151915260001b6200045e60201b620002181760201c565b6060833b620003e25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016200028b565b600080856001600160a01b031685604051620003ff919062000623565b600060405180830381855af49150503d80600081146200043c576040519150601f19603f3d011682016040523d82523d6000602084013e62000441565b606091505b5090925090506200045482828662000467565b9695505050505050565b90565b3b151590565b6060831562000478575081620001e9565b825115620004895782518084602001fd5b8160405162461bcd60e51b81526004016200028b919062000641565b80516001600160a01b0381168114620004bd57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620004f5578181015183820152602001620004db565b838111156200011d5750506000910152565b6000806000606084860312156200051d57600080fd5b6200052884620004a5565b92506200053860208501620004a5565b60408501519092506001600160401b03808211156200055657600080fd5b818601915086601f8301126200056b57600080fd5b815181811115620005805762000580620004c2565b604051601f8201601f19908116603f01168101908382118183101715620005ab57620005ab620004c2565b81604052828152896020848701011115620005c557600080fd5b620005d8836020830160208801620004d8565b80955050505050509250925092565b6000828210156200060857634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052600160045260246000fd5b6000825162000637818460208701620004d8565b9190910192915050565b602081526000825180602084015262000662816040850160208701620004d8565b601f01601f19169190910160400192915050565b6108b280620006866000396000f3fe60806040526004361061005e5760003560e01c80635c60da1b116100435780635c60da1b146100a85780638f283970146100d9578063f851a440146100f95761006d565b80633659cfe6146100755780634f1ef286146100955761006d565b3661006d5761006b61010e565b005b61006b61010e565b34801561008157600080fd5b5061006b61009036600461073c565b610128565b61006b6100a3366004610757565b61016f565b3480156100b457600080fd5b506100bd6101e0565b6040516001600160a01b03909116815260200160405180910390f35b3480156100e557600080fd5b5061006b6100f436600461073c565b61021b565b34801561010557600080fd5b506100bd610245565b6101166102a2565b610126610121610341565b61034b565b565b61013061036f565b6001600160a01b0316336001600160a01b0316141561016757610164816040518060200160405280600081525060006103a2565b50565b61016461010e565b61017761036f565b6001600160a01b0316336001600160a01b031614156101d8576101d38383838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250600192506103a2915050565b505050565b6101d361010e565b60006101ea61036f565b6001600160a01b0316336001600160a01b031614156102105761020b610341565b905090565b61021861010e565b90565b61022361036f565b6001600160a01b0316336001600160a01b0316141561016757610164816103cd565b600061024f61036f565b6001600160a01b0316336001600160a01b031614156102105761020b61036f565b6060610295838360405180606001604052806027815260200161085660279139610421565b9392505050565b3b151590565b6102aa61036f565b6001600160a01b0316336001600160a01b031614156101265760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b600061020b61050c565b3660008037600080366000845af43d6000803e80801561036a573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b6103ab83610534565b6000825111806103b85750805b156101d3576103c78383610270565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103f661036f565b604080516001600160a01b03928316815291841660208301520160405180910390a161016481610574565b6060833b6104975760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610338565b600080856001600160a01b0316856040516104b29190610806565b600060405180830381855af49150503d80600081146104ed576040519150601f19603f3d011682016040523d82523d6000602084013e6104f2565b606091505b509150915061050282828661064c565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610393565b61053d81610685565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105f05760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610338565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039290921691909117905550565b6060831561065b575081610295565b82511561066b5782518084602001fd5b8160405162461bcd60e51b81526004016103389190610822565b803b6106f95760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610338565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610613565b80356001600160a01b038116811461073757600080fd5b919050565b60006020828403121561074e57600080fd5b61029582610720565b60008060006040848603121561076c57600080fd5b61077584610720565b9250602084013567ffffffffffffffff8082111561079257600080fd5b818601915086601f8301126107a657600080fd5b8135818111156107b557600080fd5b8760208285010111156107c757600080fd5b6020830194508093505050509250925092565b60005b838110156107f55781810151838201526020016107dd565b838111156103c75750506000910152565b600082516108188184602087016107da565b9190910192915050565b60208152600082518060208401526108418160408501602087016107da565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212204ef1142f9f0499ce6511923c35ef8d04a0c6d037c02906896aa0b903bafc017164736f6c634300080b0033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220bb082f3e103dac4827c383c4b6ac1be737219b567c01a6993e3088a3650b85f764736f6c634300080b0033",
  "deployedBytecode": "0x608060405260043610620004a85760003560e01c80638091f3bf1162000272578063ba414fa6116200015d578063ec30903811620000ca578063f26b854f1162000095578063fb86a4041162000078578063fb86a4041462000cda578063fbcd9b051462000cf2578063fbf6d2e31462000d0d57600080fd5b8063f26b854f1462000cb8578063f88979451462000cc257600080fd5b8063ec3090381462000c58578063eef49ee31462000c70578063efbe1c1c1462000c88578063f0ea4bfc1462000ca057600080fd5b8063d6b0f4841162000128578063e1d03ecf116200010b578063e1d03ecf1462000bed578063e498bd8b1462000c0f578063ea8a1af01462000c4057600080fd5b8063d6b0f4841462000bbd578063d85bd5261462000bd557600080fd5b8063ba414fa61462000b3b578063be9a65551462000b53578063c1d0ea221462000b6b578063cdfb2b4e1462000ba557600080fd5b80639a9e3fd811620001fc578063b4ee86f611620001c7578063b70aeaf411620001aa578063b70aeaf41462000ad9578063b923b2051462000b00578063ba1f879f1462000b1857600080fd5b8063b4ee86f61462000aa6578063b6b55f251462000ac257600080fd5b80639a9e3fd81462000a435780639b693b241462000a5f578063a20ecbbb1462000a77578063b2af127c1462000a8f57600080fd5b80638aae995a116200023d5780638aae995a14620009cf5780638da5cb5b14620009e7578063906a26e01462000a0957806393e59dc11462000a2157600080fd5b80638091f3bf146200094c5780638092db55146200096f57806380e9071b146200099257806382fe3aca14620009aa57600080fd5b806342f3938111620003935780635fcbd285116200031d57806370baed4311620002e85780637a8ca61511620002cb5780637a8ca61514620008ed5780637e1c0c09146200090f5780637f649783146200092757600080fd5b806370baed4314620008b05780637243460e14620008c857600080fd5b80635fcbd2851462000832578063611b4095146200085457806361d027b314620008765780636ac5db19146200089857600080fd5b8063548db174116200035e578063548db17414620007ae578063570d3e2514620007d35780635909865a14620007f85780635f64b55b146200081057600080fd5b806342f39381146200073457806344df8e70146200074c5780634bb278f3146200076f578063527203e3146200078757600080fd5b806317ff407c11620004325780631cb8581811620003fd5780633ccfd60b11620003e05780633ccfd60b14620006d75780633e47158c14620006ef5780633f9942ff146200071157600080fd5b80631cb8581814620006905780631dd62ef714620006b257600080fd5b806317ff407c146200060c578063184d69ab146200063f578063193e851214620006605780631a686502146200067857600080fd5b806314f10d92116200047357806314f10d92146200058357806315d74bb314620005b757806316a7891014620005cf57806317f708fb14620005f457600080fd5b80630238c6da14620004d95780630974485014620005185780630fc63d10146200053857806312fa6feb146200055a57600080fd5b36620004d4576046546001600160a01b031615620004c557600080fd5b620004d2335b3462000d32565b005b600080fd5b348015620004e657600080fd5b50603654620004fb906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156200052557600080fd5b506034546001600160a01b0316620004fb565b3480156200054557600080fd5b50604554620004fb906001600160a01b031681565b3480156200056757600080fd5b506200057262001184565b60405190151581526020016200050f565b3480156200059057600080fd5b50620005a8620005a23660046200415d565b620011a6565b6040519081526020016200050f565b348015620005c457600080fd5b50620004d2620011d4565b348015620005dc57600080fd5b5062000572620005ee3660046200415d565b62001470565b3480156200060157600080fd5b50620004d262001509565b3480156200061957600080fd5b506200062462001636565b6040516200050f9d9c9b9a99989796959493929190620041da565b3480156200064c57600080fd5b506058546200057290610100900460ff1681565b3480156200066d57600080fd5b50620004d262001718565b3480156200068557600080fd5b50620005a8604d5481565b3480156200069d57600080fd5b50603854620004fb906001600160a01b031681565b348015620006bf57600080fd5b50620004d2620006d136600462004362565b62001783565b348015620006e457600080fd5b50620004d262001b8d565b348015620006fc57600080fd5b50603754620004fb906001600160a01b031681565b3480156200071e57600080fd5b506052546200057290600160b01b900460ff1681565b3480156200074157600080fd5b50620005a8604b5481565b3480156200075957600080fd5b506050546200057290600160a01b900460ff1681565b3480156200077c57600080fd5b50620004d262001d56565b3480156200079457600080fd5b506200079f62002686565b6040516200050f919062004474565b348015620007bb57600080fd5b50620004d2620007cd36600462004539565b6200281e565b348015620007e057600080fd5b50620004d2620007f23660046200415d565b62002948565b3480156200080557600080fd5b50620004d2620029e9565b3480156200081d57600080fd5b50604654620004fb906001600160a01b031681565b3480156200083f57600080fd5b50603954620004fb906001600160a01b031681565b3480156200086157600080fd5b506050546001600160a01b0316151562000572565b3480156200088357600080fd5b50605254620004fb906001600160a01b031681565b348015620008a557600080fd5b50620005a8604a5481565b348015620008bd57600080fd5b50620005a860555481565b348015620008d557600080fd5b50620005a8620008e7366004620045f8565b62002b64565b348015620008fa57600080fd5b50603454620004fb906001600160a01b031681565b3480156200091c57600080fd5b50620005a860535481565b3480156200093457600080fd5b50620004d26200094636600462004539565b62002bce565b3480156200095957600080fd5b506052546200057290600160a81b900460ff1681565b3480156200097c57600080fd5b506052546200057290600160a01b900460ff1681565b3480156200099f57600080fd5b50620004d262002cd2565b348015620009b757600080fd5b50620004d2620009c93660046200461b565b62002e28565b348015620009dc57600080fd5b50620005a860545481565b348015620009f457600080fd5b50603354620004fb906001600160a01b031681565b34801562000a1657600080fd5b50620005a860475481565b34801562000a2e57600080fd5b50605054620004fb906001600160a01b031681565b34801562000a5057600080fd5b50604754605654101562000572565b34801562000a6c57600080fd5b506200057262002fc7565b34801562000a8457600080fd5b50620005a8604c5481565b620004d262000aa03660046200415d565b62002fd4565b34801562000ab357600080fd5b50605854620005729060ff1681565b620004d262000ad336600462004710565b6200305a565b34801562000ae657600080fd5b5062000af16200309c565b6040516200050f91906200472a565b34801562000b0d57600080fd5b50620004d262003132565b34801562000b2557600080fd5b506050546200057290600160a81b900460ff1681565b34801562000b4857600080fd5b506200057262003269565b34801562000b6057600080fd5b50620005a8604e5481565b34801562000b7857600080fd5b50620005a862000b8a3660046200415d565b6001600160a01b031660009081526057602052604090205490565b34801562000bb257600080fd5b50620004d262003283565b34801562000bca57600080fd5b50620004d262003323565b34801562000be257600080fd5b5062000572620033c0565b34801562000bfa57600080fd5b50603554620004fb906001600160a01b031681565b34801562000c1c57600080fd5b50620005a862000c2e3660046200415d565b60576020526000908152604090205481565b34801562000c4d57600080fd5b50620004d2620033d9565b34801562000c6557600080fd5b506200057262003534565b34801562000c7d57600080fd5b50620005a8620035af565b34801562000c9557600080fd5b50620005a8604f5481565b34801562000cad57600080fd5b50620005a860565481565b620004d2620035bc565b34801562000ccf57600080fd5b50620005a860495481565b34801562000ce757600080fd5b50620005a860485481565b34801562000cff57600080fd5b50620005a86402540be40081565b34801562000d1a57600080fd5b50620005a862000d2c366004620045f8565b6200363f565b605254600160b01b900460ff161562000d855760405162461bcd60e51b815260206004820152601060248201526f14d85b19481a5cc818d85b98d95b195960821b60448201526064015b60405180910390fd5b62000d8f620033c0565b62000ddd5760405162461bcd60e51b815260206004820152601360248201527f53616c652069736e27742072756e6e696e672100000000000000000000000000604482015260640162000d7c565b62000de762003534565b62000e355760405162461bcd60e51b815260206004820152601e60248201527f546f6b656e2062616c616e63652069736e277420746f70706564207570210000604482015260640162000d7c565b60495481101562000e895760405162461bcd60e51b815260206004820152601860248201527f416d6f756e74206d7573742062652061626f7665206d696e0000000000000000604482015260640162000d7c565b604a5481111562000edd5760405162461bcd60e51b815260206004820152601860248201527f416d6f756e74206d7573742062652062656c6f77206d61780000000000000000604482015260640162000d7c565b60485460565462000eef9083620036a9565b111562000f3f5760405162461bcd60e51b815260206004820152601460248201527f43616e7420657863656564206861726420636170000000000000000000000000604482015260640162000d7c565b604a546001600160a01b03831660009081526057602052604090205462000f679083620036a9565b111562000fb75760405162461bcd60e51b815260206004820152601e60248201527f43616e74206465706f736974206d6f7265207468616e20746865206d61780000604482015260640162000d7c565b6050546001600160a01b03161580159062000fd95750605854610100900460ff165b156200109e57605054604051633af32abf60e01b81526001600160a01b03848116600483015290911690633af32abf90602401602060405180830381865afa1580156200102a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200105091906200473f565b6200109e5760405162461bcd60e51b815260206004820152601460248201527f55736572206e6f742077686974656c6973746564000000000000000000000000604482015260640162000d7c565b604754605654108015620010c25750604754605654620010bf9083620036a9565b10155b156200113057603554604051634530ffb760e11b81526001600160a01b0390911690638a61ff6e90620010fb906003906004016200475f565b600060405180830381600087803b1580156200111657600080fd5b505af11580156200112b573d6000803e3d6000fd5b505050505b6001600160a01b038216600090815260576020526040902054620011559082620036a9565b6001600160a01b0383166000908152605760205260409020556056546200117d9082620036a9565b6056555050565b6000604f5442101580620011a15750605254600160a81b900460ff165b905090565b6001600160a01b038116600090815260576020526040812054620011cd81604b546200363f565b9392505050565b605254600160b01b900460ff1615620012235760405162461bcd60e51b815260206004820152601060248201526f14d85b19481a5cc818d85b98d95b195960821b604482015260640162000d7c565b6200122d620033c0565b6200127b5760405162461bcd60e51b815260206004820152601360248201527f53616c652069736e27742072756e6e696e672100000000000000000000000000604482015260640162000d7c565b6200128562003534565b620012d35760405162461bcd60e51b815260206004820152601e60248201527f546f6b656e2062616c616e63652069736e277420746f70706564207570210000604482015260640162000d7c565b33600090815260576020526040902054620012ef81806200479e565b336000908152605760205260409020556056546200130e9082620036b7565b6056556035546040805163d29004d960e01b815290516000926200139f926127109262001398926001600160a01b03169163d29004d99160048083019260209291908290030181865afa1580156200136a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620013909190620047b8565b8590620036c5565b90620036d3565b90506000620013af8383620036b7565b6046549091506001600160a01b03166200143357604051339082156108fc029083906000818181858888f19350505050158015620013f1573d6000803e3d6000fd5b506052546040516001600160a01b039091169083156108fc029084906000818181858888f193505050501580156200142d573d6000803e3d6000fd5b50505050565b6046546200144c906001600160a01b03163383620036e1565b6052546046546200146b916001600160a01b03918216911684620036e1565b505050565b6050546000906001600160a01b031615620014fc57605054604051633af32abf60e01b81526001600160a01b03848116600483015290911690633af32abf90602401602060405180830381865afa158015620014d0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620014f691906200473f565b92915050565b506000919050565b919050565b6035546001600160a01b03163314806200152d57506033546001600160a01b031633145b806200154357506034546001600160a01b031633145b620015885760405162461bcd60e51b815260206004820152601460248201527321b0b63632b91034b9b73a1030b71030b236b4b760611b604482015260640162000d7c565b604e544210620015ca5760405162461bcd60e51b815260206004820152600c60248201526b14d85b19481cdd185c9d195960a21b604482015260640162000d7c565b6050546001600160a01b0316620016245760405162461bcd60e51b815260206004820152601b60248201527f54686572652069736e277420612077686974656c697374207365740000000000604482015260640162000d7c565b605080546001600160a01b0319169055565b603a8054603b54603c54603d54603e54603f54604054604154604254604354604480549a9b999a989997989697959694959394929360ff80841694610100850482169462010000900490911692906200168f90620047d2565b80601f0160208091040260200160405190810160405280929190818152602001828054620016bd90620047d2565b80156200170e5780601f10620016e2576101008083540402835291602001916200170e565b820191906000526020600020905b815481529060010190602001808311620016f057829003601f168201915b505050505090508d565b6035546001600160a01b03163314620017745760405162461bcd60e51b815260206004820152601260248201527f6f6e6c79207265666c657820726f757465720000000000000000000000000000604482015260640162000d7c565b6058805460ff19166001179055565b6035546001600160a01b0316331480620017a757506033546001600160a01b031633145b80620017bd57506034546001600160a01b031633145b620018025760405162461bcd60e51b815260206004820152601460248201527321b0b63632b91034b9b73a1030b71030b236b4b760611b604482015260640162000d7c565b6034546001600160a01b0316331415620018755760585460ff166200186a5760405162461bcd60e51b815260206004820152601860248201527f73616c6520757064617465206e6f7420617070726f7665640000000000000000604482015260640162000d7c565b6058805460ff191690555b8051603a908155602080830151603b55604080840151603c556060840151603d556080840151603e5560a0840151603f5560c0840151905560e0830151604155610100808401516042556101208401516043805461014087015161016088015161ffff1990921693151561ff001916939093179215159093029190911762ff0000191662010000921515929092029190911790556101808301518051849392620019259260449291019062004086565b5050815160475550602081015160485560408101516049556060810151604a556080810151604b5560a0810151604c55610160810151620019695760c0810151604d555b60e0810151604e55610100810151604f55610140810151605080546101608401511515600160a81b0260ff60a81b19931515600160a01b02939093167fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff90911617919091179055604854604b54620019e291906200363f565b605455605054600160a81b900460ff1662001a205762001a1c61271062001398604d5462001a15604854604c546200363f565b90620036c5565b6055555b60555460545462001a3191620036a9565b6053556050546001600160a01b031615801562001a5057508061012001515b1562001b5657603654603754604080516000815260208101918290526001600160a01b0393841693909216919062001a889062004115565b62001a96939291906200480f565b604051809103906000f08015801562001ab3573d6000803e3d6000fd5b50605080546001600160a01b0319166001600160a01b039290921691821790556040805163204a7f0760e21b81529051638129fc1c9160048082019260009290919082900301818387803b15801562001b0b57600080fd5b505af115801562001b20573d6000803e3d6000fd5b5050505062001b2c3390565b6035546001600160a01b039081169116141562001b53576058805461ff0019166101001790555b50565b6050546001600160a01b03161580159062001b745750806101200151155b1562001b5357605080546001600160a01b031916905550565b62001b9762001184565b62001be55760405162461bcd60e51b815260206004820152601060248201527f53616c65206861736e7420656e64656400000000000000000000000000000000604482015260640162000d7c565b3360009081526057602052604090205462001c435760405162461bcd60e51b815260206004820152601260248201527f55736572206469646e742070617274616b650000000000000000000000000000604482015260640162000d7c565b33600090815260576020526040812080549190556047546056541062001cee57605254600160a81b900460ff1662001cbe5760405162461bcd60e51b815260206004820152601460248201527f53616c65206861736e742066696e616c697a6564000000000000000000000000604482015260640162000d7c565b600062001cce82604b546200363f565b60455490915062001cea906001600160a01b0316338362003735565b5050565b62001cf862003269565b1562001b53576046546001600160a01b031662001d3d57604051339082156108fc029083906000818181858888f1935050505015801562001cea573d6000803e3d6000fd5b60465462001b53906001600160a01b03163383620036e1565b6035546001600160a01b031633148062001d7a57506033546001600160a01b031633145b8062001d9057506034546001600160a01b031633145b62001dd55760405162461bcd60e51b815260206004820152601460248201527321b0b63632b91034b9b73a1030b71030b236b4b760611b604482015260640162000d7c565b604754605654101562001e2b5760405162461bcd60e51b815260206004820152601660248201527f53616c652069736e2774207375636365737366756c2100000000000000000000604482015260640162000d7c565b42604f5560355460408051633a4c173160e11b8152905160009262001eb8926127109262001398926001600160a01b0316916374982e629160048083019260209291908290030181865afa15801562001e88573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001eae9190620047b8565b60565490620036c5565b9050600062001f5161271062001398603560009054906101000a90046001600160a01b03166001600160a01b031663e6fd885f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001f1b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001f419190620047b8565b62001a15605654604b546200363f565b6046549091506001600160a01b031662001f835760525462001f7d906001600160a01b03168362003879565b62001fa2565b60465460525462001fa2916001600160a01b0390811691168462003735565b60455460525462001fc1916001600160a01b0390811691168362003735565b605054600090600160a81b900460ff166200249957620020028362001ffb61271062001398604d54605654620036c590919063ffffffff16565b90620036b7565b905060006200201482604c546200363f565b60455460385491925062002036916001600160a01b0391821691168362003962565b6046546001600160a01b031662002293576038546045546001600160a01b039182169163f305d719918591168460008033620020754261012c620036a9565b60405160e089901b6001600160e01b03191681526001600160a01b039687166004820152602481019590955260448501939093526064840191909152909216608482015260a481019190915260c40160606040518083038185885af1158015620020e3573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906200210a919062004846565b50506038546040805163c45a015560e01b815290516001600160a01b03909216925063c45a01559160048083019260209291908290030181865afa15801562002157573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200217d919062004875565b604554603854604080516315ab88c960e31b815290516001600160a01b039485169463e6a4390594811693169163ad5c46489160048083019260209291908290030181865afa158015620021d5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620021fb919062004875565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa15801562002247573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200226d919062004875565b603980546001600160a01b0319166001600160a01b039290921691909117905562002497565b604654603854620022b2916001600160a01b0390811691168462003962565b6038546045546046546001600160a01b039283169263e8e337009281169116848660008033620022e54261012c620036a9565b60405160e08a901b6001600160e01b03191681526001600160a01b039889166004820152968816602488015260448701959095526064860193909352608485019190915260a484015290921660c482015260e4810191909152610104016060604051808303816000875af115801562002362573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002388919062004846565b50506038546040805163c45a015560e01b815290516001600160a01b03909216925063c45a01559160048083019260209291908290030181865afa158015620023d5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620023fb919062004875565b60455460465460405163e6a4390560e01b81526001600160a01b039283166004820152908216602482015291169063e6a4390590604401602060405180830381865afa15801562002450573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002476919062004875565b603980546001600160a01b0319166001600160a01b03929092169190911790555b505b6046546001600160a01b0316620024d757620024d133620024cb8562001ffb85605654620036b790919063ffffffff16565b62003879565b6200250b565b6046546200250b906001600160a01b031633620025058662001ffb86605654620036b790919063ffffffff16565b62003735565b60006200251d605654604b546200363f565b6045546040516370a0823160e01b815230600482015291925060009183916001600160a01b0316906370a0823190602401602060405180830381865afa1580156200256c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620025929190620047b8565b6200259e91906200479e565b605054909150600160a81b900460ff16158015620025c55750605054600160a01b900460ff165b15620025ec57604554620025e6906001600160a01b031661dead8362003735565b62002605565b60455462002605906001600160a01b0316338362003735565b6052805460ff60a81b1916600160a81b179055603554604051634530ffb760e11b81526001600160a01b0390911690638a61ff6e906200264b906001906004016200475f565b600060405180830381600087803b1580156200266657600080fd5b505af11580156200267b573d6000803e3d6000fd5b505050505050505050565b620026f8604051806101a00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600015158152602001600015158152602001600015158152602001606081525090565b604080516101a081018252603a80548252603b546020830152603c5482840152603d546060830152603e546080830152603f5460a0830152915460c082015260415460e08201526042546101008083019190915260435460ff80821615156101208501529181048216151561014084015262010000900416151561016082015260448054919291610180840191906200279190620047d2565b80601f0160208091040260200160405190810160405280929190818152602001828054620027bf90620047d2565b8015620028105780601f10620027e45761010080835404028352916020019162002810565b820191906000526020600020905b815481529060010190602001808311620027f257829003601f168201915b505050505081525050905090565b6035546001600160a01b03163314806200284257506033546001600160a01b031633145b806200285857506034546001600160a01b031633145b6200289d5760405162461bcd60e51b815260206004820152601460248201527321b0b63632b91034b9b73a1030b71030b236b4b760611b604482015260640162000d7c565b604e544210620028df5760405162461bcd60e51b815260206004820152600c60248201526b14d85b19481cdd185c9d195960a21b604482015260640162000d7c565b6050546040516315236c5d60e21b81526001600160a01b039091169063548db174906200291190849060040162004895565b600060405180830381600087803b1580156200292c57600080fd5b505af115801562002941573d6000803e3d6000fd5b5050505050565b6035546001600160a01b03163314806200296c57506033546001600160a01b031633145b806200298257506034546001600160a01b031633145b620029c75760405162461bcd60e51b815260206004820152601460248201527321b0b63632b91034b9b73a1030b71030b236b4b760611b604482015260640162000d7c565b603480546001600160a01b0319166001600160a01b0392909216919091179055565b6035546001600160a01b031633148062002a0d57506033546001600160a01b031633145b8062002a2357506034546001600160a01b031633145b62002a685760405162461bcd60e51b815260206004820152601460248201527321b0b63632b91034b9b73a1030b71030b236b4b760611b604482015260640162000d7c565b6050546001600160a01b03161562002b62576036546037546001600160a01b03918216911660005b6040519080825280601f01601f19166020018201604052801562002abb576020820181803683370190505b5060405162002aca9062004115565b62002ad8939291906200480f565b604051809103906000f08015801562002af5573d6000803e3d6000fd5b50605080546001600160a01b0319166001600160a01b039290921691821790556040805163204a7f0760e21b81529051638129fc1c9160048082019260009290919082900301818387803b15801562002b4d57600080fd5b505af11580156200142d573d6000803e3d6000fd5b565b604554600090620011cd9062002b83906001600160a01b031662003aa6565b62002b9090600a620049e1565b60465462001398908590829062002bb0906001600160a01b031662003aa6565b62002bbd90600a620049e1565b62001a15896402540be400620036c5565b6035546001600160a01b031633148062002bf257506033546001600160a01b031633145b8062002c0857506034546001600160a01b031633145b62002c4d5760405162461bcd60e51b815260206004820152601460248201527321b0b63632b91034b9b73a1030b71030b236b4b760611b604482015260640162000d7c565b604f54421062002ca05760405162461bcd60e51b815260206004820152600a60248201527f53616c6520656e64656400000000000000000000000000000000000000000000604482015260640162000d7c565b605054604051637f64978360e01b81526001600160a01b0390911690637f649783906200291190849060040162004895565b6035546001600160a01b031633148062002cf657506033546001600160a01b031633145b8062002d0c57506034546001600160a01b031633145b62002d515760405162461bcd60e51b815260206004820152601460248201527321b0b63632b91034b9b73a1030b71030b236b4b760611b604482015260640162000d7c565b605254600160b01b900460ff1662002dac5760405162461bcd60e51b815260206004820152601960248201527f53616c65206861736e2774206265656e2063616e63656c656400000000000000604482015260640162000d7c565b6045546034546040516370a0823160e01b815230600482015262002b62926001600160a01b0390811692169082906370a08231906024015b602060405180830381865afa15801562002e02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620025059190620047b8565b600054610100900460ff168062002e42575060005460ff16155b62002ea75760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840162000d7c565b600054610100900460ff1615801562002eca576000805461ffff19166101011790555b62002ed462003b2f565b603580546001600160a01b03199081166001600160a01b038e8116919091179092556033805482168d84161790556034805482168c84161790556045805482168b84161790556046805490911691891691909117905562002f39888c60001962003962565b603880546001600160a01b038089166001600160a01b031992831617909255603680548884169083161790556037805492871692909116919091179055825162002f8b90605190602086019062004086565b50605280546001600160a01b0319166001600160a01b038416179055801562002fba576000805461ff00191690555b5050505050505050505050565b6000620011a13362001470565b6033546001600160a01b031633146200301d5760405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b604482015260640162000d7c565b6045546033546040516370a0823160e01b815230600482015262001b53926001600160a01b0390811692169082906370a082319060240162002de4565b6046546001600160a01b0316620030765762001b5333620004cb565b60465462003090906001600160a01b031633308462003bf0565b62001b53338262000d32565b60518054620030ab90620047d2565b80601f0160208091040260200160405190810160405280929190818152602001828054620030d990620047d2565b80156200312a5780601f10620030fe576101008083540402835291602001916200312a565b820191906000526020600020905b8154815290600101906020018083116200310c57829003601f168201915b505050505081565b6035546001600160a01b03163314806200315657506033546001600160a01b031633145b806200316c57506034546001600160a01b031633145b620031b15760405162461bcd60e51b815260206004820152601460248201527321b0b63632b91034b9b73a1030b71030b236b4b760611b604482015260640162000d7c565b604e544210620031f35760405162461bcd60e51b815260206004820152600c60248201526b14d85b19481cdd185c9d195960a21b604482015260640162000d7c565b6050546001600160a01b0316156200324e5760405162461bcd60e51b815260206004820152601d60248201527f546865726520697320616c726561647920612077686974656c69737421000000604482015260640162000d7c565b6036546037546001600160a01b039182169116600062002a90565b6000604f5442101580620011a15750506047546056541090565b6035546001600160a01b0316331480620032a757506033546001600160a01b031633145b80620032bd57506034546001600160a01b031633145b620033025760405162461bcd60e51b815260206004820152601460248201527321b0b63632b91034b9b73a1030b71030b236b4b760611b604482015260640162000d7c565b605854610100900460ff1662002b62576058805461ff001916610100179055565b6035546001600160a01b03163314806200334757506033546001600160a01b031633145b806200335d57506034546001600160a01b031633145b620033a25760405162461bcd60e51b815260206004820152601460248201527321b0b63632b91034b9b73a1030b71030b236b4b760611b604482015260640162000d7c565b605854610100900460ff161562002b62576058805461ff0019169055565b6000604e544210158015620011a1575050604f54421090565b6035546001600160a01b0316331480620033fd57506033546001600160a01b031633145b806200341357506034546001600160a01b031633145b620034585760405162461bcd60e51b815260206004820152601460248201527321b0b63632b91034b9b73a1030b71030b236b4b760611b604482015260640162000d7c565b605254600160a81b900460ff1615620034b45760405162461bcd60e51b815260206004820152601160248201527f53616c6520686173206c61756e63686564000000000000000000000000000000604482015260640162000d7c565b42604f55605280547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff16600160b01b179055603554604051634530ffb760e11b81526001600160a01b0390911690638a61ff6e9062003519906002906004016200475f565b600060405180830381600087803b15801562002b4d57600080fd5b6053546045546040516370a0823160e01b8152306004820152600092916001600160a01b0316906370a0823190602401602060405180830381865afa15801562003582573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620035a89190620047b8565b1015905090565b6000620011a13362000b8a565b6033546001600160a01b03163314620036055760405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b604482015260640162000d7c565b6033546040516001600160a01b03909116904780156108fc02916000818181858888f1935050505015801562001b53573d6000803e3d6000fd5b604654600090620011cd906200365e906001600160a01b031662003aa6565b6200366b90600a620049e1565b60455462001398906402540be40090829062003690906001600160a01b031662003aa6565b6200369d90600a620049e1565b62001a158989620036c5565b6000620011cd8284620049ef565b6000620011cd82846200479e565b6000620011cd828462004a0a565b6000620011cd828462004a2c565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526200146b90849062003d44565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b179052915160009283929087169162003793919062004a4f565b6000604051808303816000865af19150503d8060008114620037d2576040519150601f19603f3d011682016040523d82523d6000602084013e620037d7565b606091505b509150915081801562003805575080511580620038055750808060200190518101906200380591906200473f565b620029415760405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201527f616e73666572206661696c656400000000000000000000000000000000000000606482015260840162000d7c565b604080516000808252602082019092526001600160a01b038416908390604051620038a5919062004a4f565b60006040518083038185875af1925050503d8060008114620038e4576040519150601f19603f3d011682016040523d82523d6000602084013e620038e9565b606091505b50509050806200146b5760405162461bcd60e51b815260206004820152603460248201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60448201527f20455448207472616e73666572206661696c6564000000000000000000000000606482015260840162000d7c565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b1790529151600092839290871691620039c0919062004a4f565b6000604051808303816000865af19150503d8060008114620039ff576040519150601f19603f3d011682016040523d82523d6000602084013e62003a04565b606091505b509150915081801562003a3257508051158062003a3257508080602001905181019062003a3291906200473f565b620029415760405162461bcd60e51b815260206004820152602b60248201527f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060448201527f726f7665206661696c6564000000000000000000000000000000000000000000606482015260840162000d7c565b60006001600160a01b0382161562003b2357816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801562003af7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003b1d919062004a6d565b62003b26565b60125b60ff1692915050565b600054610100900460ff168062003b49575060005460ff16155b62003bae5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840162000d7c565b600054610100900460ff1615801562003bd1576000805461ffff19166101011790555b62003bdb62003e30565b801562001b53576000805461ff001916905550565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b179052915160009283929088169162003c56919062004a4f565b6000604051808303816000865af19150503d806000811462003c95576040519150601f19603f3d011682016040523d82523d6000602084013e62003c9a565b606091505b509150915081801562003cc857508051158062003cc857508080602001905181019062003cc891906200473f565b62003d3c5760405162461bcd60e51b815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260448201527f616e7366657246726f6d206661696c6564000000000000000000000000000000606482015260840162000d7c565b505050505050565b600062003d9b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031662003ee69092919063ffffffff16565b8051909150156200146b578080602001905181019062003dbc91906200473f565b6200146b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840162000d7c565b600054610100900460ff168062003e4a575060005460ff16155b62003eaf5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840162000d7c565b600054610100900460ff1615801562003bdb576000805461ffff1916610101179055801562001b53576000805461ff001916905550565b606062003ef7848460008562003eff565b949350505050565b60608247101562003f795760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840162000d7c565b843b62003fc95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640162000d7c565b600080866001600160a01b0316858760405162003fe7919062004a4f565b60006040518083038185875af1925050503d806000811462004026576040519150601f19603f3d011682016040523d82523d6000602084013e6200402b565b606091505b50915091506200403d82828662004048565b979650505050505050565b6060831562004059575081620011cd565b8251156200406a5782518084602001fd5b8160405162461bcd60e51b815260040162000d7c91906200472a565b8280546200409490620047d2565b90600052602060002090601f016020900481019282620040b8576000855562004103565b82601f10620040d357805160ff191683800117855562004103565b8280016001018555821562004103579182015b8281111562004103578251825591602001919060010190620040e6565b506200411192915062004123565b5090565b610f9f8062004a9383390190565b5b8082111562004111576000815560010162004124565b6001600160a01b038116811462001b5357600080fd5b803562001504816200413a565b6000602082840312156200417057600080fd5b8135620011cd816200413a565b60005b838110156200419a57818101518382015260200162004180565b838111156200142d5750506000910152565b60008151808452620041c68160208601602086016200417d565b601f01601f19169290920160200192915050565b60006101a08f83528e60208401528d60408401528c60608401528b60808401528a60a08401528960c08401528860e084015287610100840152861515610120840152851515610140840152841515610160840152806101808401526200424381840185620041ac565b9150509e9d5050505050505050505050505050565b634e487b7160e01b600052604160045260246000fd5b6040516101a0810167ffffffffffffffff8111828210171562004295576200429562004258565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715620042c757620042c762004258565b604052919050565b801515811462001b5357600080fd5b80356200150481620042cf565b600082601f830112620042fd57600080fd5b813567ffffffffffffffff8111156200431a576200431a62004258565b6200432f601f8201601f19166020016200429b565b8181528460208386010111156200434557600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156200437557600080fd5b813567ffffffffffffffff808211156200438e57600080fd5b908301906101a08286031215620043a457600080fd5b620043ae6200426e565b823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e082015261010080840135818301525061012062004414818501620042de565b9082015261014062004428848201620042de565b908201526101606200443c848201620042de565b9082015261018083810135838111156200445557600080fd5b6200446388828701620042eb565b918301919091525095945050505050565b6020815281516020820152602082015160408201526040820151606082015260608201516080820152608082015160a082015260a082015160c082015260c082015160e0820152600060e0830151610100818185015280850151915050610120818185015280850151915050610140620044f18185018315159052565b8401519050610160620045078482018315159052565b84015190506101806200451d8482018315159052565b8401516101a084810152905062003ef76101c0840182620041ac565b600060208083850312156200454d57600080fd5b823567ffffffffffffffff808211156200456657600080fd5b818501915085601f8301126200457b57600080fd5b81358181111562004590576200459062004258565b8060051b9150620045a38483016200429b565b8181529183018401918481019088841115620045be57600080fd5b938501935b83851015620045ec5784359250620045db836200413a565b8282529385019390850190620045c3565b98975050505050505050565b600080604083850312156200460c57600080fd5b50508035926020909101359150565b6000806000806000806000806000806101408b8d0312156200463c57600080fd5b8a3562004649816200413a565b995060208b01356200465b816200413a565b985060408b01356200466d816200413a565b975060608b01356200467f816200413a565b965060808b013562004691816200413a565b9550620046a160a08c0162004150565b9450620046b160c08c0162004150565b9350620046c160e08c0162004150565b92506101008b013567ffffffffffffffff811115620046df57600080fd5b620046ed8d828e01620042eb565b925050620046ff6101208c0162004150565b90509295989b9194979a5092959850565b6000602082840312156200472357600080fd5b5035919050565b602081526000620011cd6020830184620041ac565b6000602082840312156200475257600080fd5b8151620011cd81620042cf565b60208101600583106200478257634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052601160045260246000fd5b600082821015620047b357620047b362004788565b500390565b600060208284031215620047cb57600080fd5b5051919050565b600181811c90821680620047e757607f821691505b602082108114156200480957634e487b7160e01b600052602260045260246000fd5b50919050565b60006001600160a01b038086168352808516602084015250606060408301526200483d6060830184620041ac565b95945050505050565b6000806000606084860312156200485c57600080fd5b8351925060208401519150604084015190509250925092565b6000602082840312156200488857600080fd5b8151620011cd816200413a565b6020808252825182820181905260009190848201906040850190845b81811015620048d85783516001600160a01b031683529284019291840191600101620048b1565b50909695505050505050565b600181815b808511156200492557816000190482111562004909576200490962004788565b808516156200491757918102915b93841c9390800290620048e9565b509250929050565b6000826200493e57506001620014f6565b816200494d57506000620014f6565b8160018114620049665760028114620049715762004991565b6001915050620014f6565b60ff84111562004985576200498562004788565b50506001821b620014f6565b5060208310610133831016604e8410600b8410161715620049b6575081810a620014f6565b620049c28383620048e4565b8060001904821115620049d957620049d962004788565b029392505050565b6000620011cd83836200492d565b6000821982111562004a055762004a0562004788565b500190565b600081600019048311821515161562004a275762004a2762004788565b500290565b60008262004a4a57634e487b7160e01b600052601260045260246000fd5b500490565b6000825162004a638184602087016200417d565b9190910192915050565b60006020828403121562004a8057600080fd5b815160ff81168114620011cd57600080fdfe608060405260405162000f9f38038062000f9f833981016040819052620000269162000507565b82816200005560017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd620005e7565b60008051602062000f58833981519152146200007557620000756200060d565b6200008382826000620000e7565b50620000b3905060017fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6104620005e7565b60008051602062000f3883398151915214620000d357620000d36200060d565b620000de8262000124565b50505062000676565b620000f2836200017f565b600082511180620001005750805b156200011f576200011d8383620001c160201b620002701760201c565b505b505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6200014f620001f0565b604080516001600160a01b03928316815291841660208301520160405180910390a16200017c8162000229565b50565b6200018a81620002de565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060620001e9838360405180606001604052806027815260200162000f786027913962000381565b9392505050565b60006200021a60008051602062000f3883398151915260001b6200045e60201b620002181760201c565b546001600160a01b0316919050565b6001600160a01b038116620002945760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b80620002bd60008051602062000f3883398151915260001b6200045e60201b620002181760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b620002f4816200046160201b6200029c1760201c565b620003585760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016200028b565b80620002bd60008051602062000f5883398151915260001b6200045e60201b620002181760201c565b6060833b620003e25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016200028b565b600080856001600160a01b031685604051620003ff919062000623565b600060405180830381855af49150503d80600081146200043c576040519150601f19603f3d011682016040523d82523d6000602084013e62000441565b606091505b5090925090506200045482828662000467565b9695505050505050565b90565b3b151590565b6060831562000478575081620001e9565b825115620004895782518084602001fd5b8160405162461bcd60e51b81526004016200028b919062000641565b80516001600160a01b0381168114620004bd57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620004f5578181015183820152602001620004db565b838111156200011d5750506000910152565b6000806000606084860312156200051d57600080fd5b6200052884620004a5565b92506200053860208501620004a5565b60408501519092506001600160401b03808211156200055657600080fd5b818601915086601f8301126200056b57600080fd5b815181811115620005805762000580620004c2565b604051601f8201601f19908116603f01168101908382118183101715620005ab57620005ab620004c2565b81604052828152896020848701011115620005c557600080fd5b620005d8836020830160208801620004d8565b80955050505050509250925092565b6000828210156200060857634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052600160045260246000fd5b6000825162000637818460208701620004d8565b9190910192915050565b602081526000825180602084015262000662816040850160208701620004d8565b601f01601f19169190910160400192915050565b6108b280620006866000396000f3fe60806040526004361061005e5760003560e01c80635c60da1b116100435780635c60da1b146100a85780638f283970146100d9578063f851a440146100f95761006d565b80633659cfe6146100755780634f1ef286146100955761006d565b3661006d5761006b61010e565b005b61006b61010e565b34801561008157600080fd5b5061006b61009036600461073c565b610128565b61006b6100a3366004610757565b61016f565b3480156100b457600080fd5b506100bd6101e0565b6040516001600160a01b03909116815260200160405180910390f35b3480156100e557600080fd5b5061006b6100f436600461073c565b61021b565b34801561010557600080fd5b506100bd610245565b6101166102a2565b610126610121610341565b61034b565b565b61013061036f565b6001600160a01b0316336001600160a01b0316141561016757610164816040518060200160405280600081525060006103a2565b50565b61016461010e565b61017761036f565b6001600160a01b0316336001600160a01b031614156101d8576101d38383838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250600192506103a2915050565b505050565b6101d361010e565b60006101ea61036f565b6001600160a01b0316336001600160a01b031614156102105761020b610341565b905090565b61021861010e565b90565b61022361036f565b6001600160a01b0316336001600160a01b0316141561016757610164816103cd565b600061024f61036f565b6001600160a01b0316336001600160a01b031614156102105761020b61036f565b6060610295838360405180606001604052806027815260200161085660279139610421565b9392505050565b3b151590565b6102aa61036f565b6001600160a01b0316336001600160a01b031614156101265760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b600061020b61050c565b3660008037600080366000845af43d6000803e80801561036a573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b6103ab83610534565b6000825111806103b85750805b156101d3576103c78383610270565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103f661036f565b604080516001600160a01b03928316815291841660208301520160405180910390a161016481610574565b6060833b6104975760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610338565b600080856001600160a01b0316856040516104b29190610806565b600060405180830381855af49150503d80600081146104ed576040519150601f19603f3d011682016040523d82523d6000602084013e6104f2565b606091505b509150915061050282828661064c565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610393565b61053d81610685565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105f05760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610338565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039290921691909117905550565b6060831561065b575081610295565b82511561066b5782518084602001fd5b8160405162461bcd60e51b81526004016103389190610822565b803b6106f95760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610338565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610613565b80356001600160a01b038116811461073757600080fd5b919050565b60006020828403121561074e57600080fd5b61029582610720565b60008060006040848603121561076c57600080fd5b61077584610720565b9250602084013567ffffffffffffffff8082111561079257600080fd5b818601915086601f8301126107a657600080fd5b8135818111156107b557600080fd5b8760208285010111156107c757600080fd5b6020830194508093505050509250925092565b60005b838110156107f55781810151838201526020016107dd565b838111156103c75750506000910152565b600082516108188184602087016107da565b9190910192915050565b60208152600082518060208401526108418160408501602087016107da565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212204ef1142f9f0499ce6511923c35ef8d04a0c6d037c02906896aa0b903bafc017164736f6c634300080b0033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220bb082f3e103dac4827c383c4b6ac1be737219b567c01a6993e3088a3650b85f764736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deposit(uint256)": {
        "details": "This entitles _msgSender() to (amount * presaleRate) after a successful sale"
      },
      "earlyWithdraw()": {
        "details": "This incurs a tax, where Reflex will take a cut of this tax"
      },
      "withdraw()": {
        "details": "This entitles _msgSender() to (amount * presaleRate) after a successful sale"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "configure((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,bool,bool,string))": {
        "notice": "Configure a reflex sale"
      },
      "deposit(uint256)": {
        "notice": "For users to deposit into the sale"
      },
      "earlyWithdraw()": {
        "notice": "For users to withdraw their deposited funds before the sale has been concluded"
      },
      "emergencyWithdrawBNB()": {
        "notice": "Withdraws BNB from the contract"
      },
      "emergencyWithdrawTokens(address)": {
        "notice": "Withdraws tokens that are stuck"
      },
      "exchangeRouter()": {
        "notice": "The address of the reflexRouter"
      },
      "finalize()": {
        "notice": "Finishes the sale, and if successful launches to PancakeSwap"
      },
      "lpToken()": {
        "notice": "The address of the LP token"
      },
      "owner()": {
        "notice": "The ReflexRouter owner"
      },
      "prepared()": {
        "notice": "State Settings"
      },
      "proxyAdmin()": {
        "notice": "The address of the proxy admin"
      },
      "reclaim()": {
        "notice": "EMERGENCY USE ONLY: Lets the owner of the sale reclaim any stuck funds"
      },
      "reflexRouter()": {
        "notice": "The ReflexRouter"
      },
      "runner()": {
        "notice": "The person running the sale"
      },
      "tokenA()": {
        "notice": "Configuration"
      },
      "totalTokens()": {
        "notice": "Current Status - These are modified after a sale has been setup and is running"
      },
      "whitelistImpl()": {
        "notice": "The address of the whitelist implementation"
      },
      "withdraw()": {
        "notice": "For users to withdraw from a sale"
      }
    },
    "notice": "A Reflex Sale",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/ReflexSale01.sol:ReflexSale01",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/ReflexSale01.sol:ReflexSale01",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 758,
        "contract": "contracts/ReflexSale01.sol:ReflexSale01",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3403,
        "contract": "contracts/ReflexSale01.sol:ReflexSale01",
        "label": "owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 3406,
        "contract": "contracts/ReflexSale01.sol:ReflexSale01",
        "label": "runner",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 3410,
        "contract": "contracts/ReflexSale01.sol:ReflexSale01",
        "label": "reflexRouter",
        "offset": 0,
        "slot": "53",
        "type": "t_contract(IReflexRouter01)5981"
      },
      {
        "astId": 3413,
        "contract": "contracts/ReflexSale01.sol:ReflexSale01",
        "label": "whitelistImpl",
        "offset": 0,
        "slot": "54",
        "type": "t_address"
      },
      {
        "astId": 3416,
        "contract": "contracts/ReflexSale01.sol:ReflexSale01",
        "label": "proxyAdmin",
        "offset": 0,
        "slot": "55",
        "type": "t_address"
      },
      {
        "astId": 3420,
        "contract": "contracts/ReflexSale01.sol:ReflexSale01",
        "label": "exchangeRouter",
        "offset": 0,
        "slot": "56",
        "type": "t_contract(IUniswapV2Router02)6552"
      },
      {
        "astId": 3423,
        "contract": "contracts/ReflexSale01.sol:ReflexSale01",
        "label": "lpToken",
        "offset": 0,
        "slot": "57",
        "type": "t_address"
      },
      {
        "astId": 3426,
        "contract": "contracts/ReflexSale01.sol:ReflexSale01",
        "label": "saleParams",
        "offset": 0,
        "slot": "58",
        "type": "t_struct(SaleParams)6010_storage"
      },
      {
        "astId": 3429,
        "contract": "contracts/ReflexSale01.sol:ReflexSale01",
        "label": "tokenA",
        "offset": 0,
        "slot": "69",
        "type": "t_address"
      },
      {
        "astId": 3431,
        "contract": "contracts/ReflexSale01.sol:ReflexSale01",
        "label": "tokenB",
        "offset": 0,
        "slot": "70",
        "type": "t_address"
      },
      {
        "astId": 3433,
        "contract": "contracts/ReflexSale01.sol:ReflexSale01",
        "label": "softCap",
        "offset": 0,
        "slot": "71",
        "type": "t_uint256"
      },
      {
        "astId": 3435,
        "contract": "contracts/ReflexSale01.sol:ReflexSale01",
        "label": "hardCap",
        "offset": 0,
        "slot": "72",
        "type": "t_uint256"
      },
      {
        "astId": 3437,
        "contract": "contracts/ReflexSale01.sol:ReflexSale01",
        "label": "min",
        "offset": 0,
        "slot": "73",
        "type": "t_uint256"
      },
      {
        "astId": 3439,
        "contract": "contracts/ReflexSale01.sol:ReflexSale01",
        "label": "max",
        "offset": 0,
        "slot": "74",
        "type": "t_uint256"
      },
      {
        "astId": 3441,
        "contract": "contracts/ReflexSale01.sol:ReflexSale01",
        "label": "presaleRate",
        "offset": 0,
        "slot": "75",
        "type": "t_uint256"
      },
      {
        "astId": 3443,
        "contract": "contracts/ReflexSale01.sol:ReflexSale01",
        "label": "listingRate",
        "offset": 0,
        "slot": "76",
        "type": "t_uint256"
      },
      {
        "astId": 3445,
        "contract": "contracts/ReflexSale01.sol:ReflexSale01",
        "label": "liquidity",
        "offset": 0,
        "slot": "77",
        "type": "t_uint256"
      },
      {
        "astId": 3447,
        "contract": "contracts/ReflexSale01.sol:ReflexSale01",
        "label": "start",
        "offset": 0,
        "slot": "78",
        "type": "t_uint256"
      },
      {
        "astId": 3449,
        "contract": "contracts/ReflexSale01.sol:ReflexSale01",
        "label": "end",
        "offset": 0,
        "slot": "79",
        "type": "t_uint256"
      },
      {
        "astId": 3451,
        "contract": "contracts/ReflexSale01.sol:ReflexSale01",
        "label": "whitelist",
        "offset": 0,
        "slot": "80",
        "type": "t_address"
      },
      {
        "astId": 3453,
        "contract": "contracts/ReflexSale01.sol:ReflexSale01",
        "label": "burn",
        "offset": 20,
        "slot": "80",
        "type": "t_bool"
      },
      {
        "astId": 3455,
        "contract": "contracts/ReflexSale01.sol:ReflexSale01",
        "label": "privateSale",
        "offset": 21,
        "slot": "80",
        "type": "t_bool"
      },
      {
        "astId": 3457,
        "contract": "contracts/ReflexSale01.sol:ReflexSale01",
        "label": "metaInfo",
        "offset": 0,
        "slot": "81",
        "type": "t_string_storage"
      },
      {
        "astId": 3459,
        "contract": "contracts/ReflexSale01.sol:ReflexSale01",
        "label": "treasury",
        "offset": 0,
        "slot": "82",
        "type": "t_address"
      },
      {
        "astId": 3462,
        "contract": "contracts/ReflexSale01.sol:ReflexSale01",
        "label": "prepared",
        "offset": 20,
        "slot": "82",
        "type": "t_bool"
      },
      {
        "astId": 3464,
        "contract": "contracts/ReflexSale01.sol:ReflexSale01",
        "label": "launched",
        "offset": 21,
        "slot": "82",
        "type": "t_bool"
      },
      {
        "astId": 3466,
        "contract": "contracts/ReflexSale01.sol:ReflexSale01",
        "label": "canceled",
        "offset": 22,
        "slot": "82",
        "type": "t_bool"
      },
      {
        "astId": 3469,
        "contract": "contracts/ReflexSale01.sol:ReflexSale01",
        "label": "totalTokens",
        "offset": 0,
        "slot": "83",
        "type": "t_uint256"
      },
      {
        "astId": 3471,
        "contract": "contracts/ReflexSale01.sol:ReflexSale01",
        "label": "saleAmount",
        "offset": 0,
        "slot": "84",
        "type": "t_uint256"
      },
      {
        "astId": 3473,
        "contract": "contracts/ReflexSale01.sol:ReflexSale01",
        "label": "liquidityAmount",
        "offset": 0,
        "slot": "85",
        "type": "t_uint256"
      },
      {
        "astId": 3475,
        "contract": "contracts/ReflexSale01.sol:ReflexSale01",
        "label": "raised",
        "offset": 0,
        "slot": "86",
        "type": "t_uint256"
      },
      {
        "astId": 3479,
        "contract": "contracts/ReflexSale01.sol:ReflexSale01",
        "label": "_deposited",
        "offset": 0,
        "slot": "87",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3481,
        "contract": "contracts/ReflexSale01.sol:ReflexSale01",
        "label": "isSaleUpdateApproved",
        "offset": 0,
        "slot": "88",
        "type": "t_bool"
      },
      {
        "astId": 3483,
        "contract": "contracts/ReflexSale01.sol:ReflexSale01",
        "label": "isWhitelistEnabled",
        "offset": 1,
        "slot": "88",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IReflexRouter01)5981": {
        "encoding": "inplace",
        "label": "contract IReflexRouter01",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router02)6552": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(SaleParams)6010_storage": {
        "encoding": "inplace",
        "label": "struct IReflexSale01.SaleParams",
        "members": [
          {
            "astId": 5985,
            "contract": "contracts/ReflexSale01.sol:ReflexSale01",
            "label": "soft",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5987,
            "contract": "contracts/ReflexSale01.sol:ReflexSale01",
            "label": "hard",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5989,
            "contract": "contracts/ReflexSale01.sol:ReflexSale01",
            "label": "min",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5991,
            "contract": "contracts/ReflexSale01.sol:ReflexSale01",
            "label": "max",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5993,
            "contract": "contracts/ReflexSale01.sol:ReflexSale01",
            "label": "presaleRate",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5995,
            "contract": "contracts/ReflexSale01.sol:ReflexSale01",
            "label": "listingRate",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 5997,
            "contract": "contracts/ReflexSale01.sol:ReflexSale01",
            "label": "liquidity",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 5999,
            "contract": "contracts/ReflexSale01.sol:ReflexSale01",
            "label": "start",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 6001,
            "contract": "contracts/ReflexSale01.sol:ReflexSale01",
            "label": "end",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 6003,
            "contract": "contracts/ReflexSale01.sol:ReflexSale01",
            "label": "whitelisted",
            "offset": 0,
            "slot": "9",
            "type": "t_bool"
          },
          {
            "astId": 6005,
            "contract": "contracts/ReflexSale01.sol:ReflexSale01",
            "label": "burn",
            "offset": 1,
            "slot": "9",
            "type": "t_bool"
          },
          {
            "astId": 6007,
            "contract": "contracts/ReflexSale01.sol:ReflexSale01",
            "label": "privateSale",
            "offset": 2,
            "slot": "9",
            "type": "t_bool"
          },
          {
            "astId": 6009,
            "contract": "contracts/ReflexSale01.sol:ReflexSale01",
            "label": "metaInfo",
            "offset": 0,
            "slot": "10",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}